<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://siqindong.com/atom.xml" rel="self"/>
  
  <link href="https://siqindong.com/"/>
  <updated>2022-02-01T22:54:56.779Z</updated>
  <id>https://siqindong.com/</id>
  
  <author>
    <name>Siqin Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Build a PicBed using GitHub and jsdelivr</title>
    <link href="https://siqindong.com/2022/02/01/Build-a-PicBed-using-GitHub-and-jsdelivr/"/>
    <id>https://siqindong.com/2022/02/01/Build-a-PicBed-using-GitHub-and-jsdelivr/</id>
    <published>2022-02-01T22:39:01.000Z</published>
    <updated>2022-02-01T22:54:56.779Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考鴻塵的文章：<a href="https://hwame.top/20201125/github-pics-with-jsdelivr.html">搭建Github图床并利用jsDelivr加速</a></p><h2 id="搭建Github图床"><a href="#搭建Github图床" class="headerlink" title="搭建Github图床"></a>搭建Github图床</h2><p><strong>新建仓库</strong></p><p>新建一个仓库，名字随意，我的就叫Picbed，使用<code>README.md</code>初始化。</p><h2 id="使用PicGo上传图片"><a href="#使用PicGo上传图片" class="headerlink" title="使用PicGo上传图片"></a>使用PicGo上传图片</h2><p><a href="https://github.com/Molunerfinn/PicGo">PicGo</a>是一个用于快速上传图片并获取图片URL链接的开源工具，使用它可以解放写作双手、提高生产力。使用PicGo的原因仅仅是因为能够方便地将上传图片到Github，并直接获取jsDelivr的加速后的图片地址。</p><p><strong>生成令牌</strong></p><p>依次点击头像→<code>Settings→Developer settings→Personal access tokens</code>,或直接点击<strong><a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></strong>，可以看到已有的访问令牌，但是口令只显示一次，所以不可复用，需要重新生成。<br>点击Generate new token，可能需要输入密码，在 New personal access token中填写备注、勾选repo整个复选框。</p><h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><p>下载安装好以后，配置「Github图床」：</p><p>设定仓库名：Github仓库，格式为<code>username/repos</code>，示例：<code>siqindong/Picbed</code>。<br>设定分支名：Github仓库的分支，格式为<code>branch</code>，示例：<code>main</code></p><p>设定Token：即上一步生成的访问令牌。<br>指定存储路径：可选。不填则为仓库根目录，建议按图片分类放在不同文件夹下。<br>设定自定义域名：此即jsDelivr的配置，格式为<code>https://cdn.jsdelivr.net/gh/username/repos@branch</code>，示例：<code>https://cdn.jsdelivr.net/gh/siqindong/Picbed@main</code></p><p><code>gh</code>：表示来自Github的内容；<br><code>username</code>：Github用户名；<br><code>repos</code>：Github仓库；<br><code>branch</code>：仓库分支，注意是master还是main。</p><h2 id="PicGo使用"><a href="#PicGo使用" class="headerlink" title="PicGo使用"></a>PicGo使用</h2><p>PicGo配置完成后即可使用了，它支持拖拽、点击、剪贴板上传，上传后，图片链接直接复制的你的剪贴板中，极大地提高了生产效率。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://hwame.top/20201125/github-pics-with-jsdelivr.html">https://hwame.top/20201125/github-pics-with-jsdelivr.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文参考鴻塵的文章：&lt;a href=&quot;https://hwame.top/20201125/github-pics-with-jsdelivr.html&quot;&gt;搭建Github图床并利用jsDelivr加速&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;搭建Github图床&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://siqindong.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Backup and Recovery of Hexo Blog</title>
    <link href="https://siqindong.com/2022/02/01/Backup-and-Recovery-of-Hexo-Blog/"/>
    <id>https://siqindong.com/2022/02/01/Backup-and-Recovery-of-Hexo-Blog/</id>
    <published>2022-02-01T21:52:33.000Z</published>
    <updated>2022-02-01T22:23:29.786Z</updated>
    
    <content type="html"><![CDATA[<p>参考<a href="https://blog.quickso.cn/2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/">这篇文章</a>。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>已经初始化好了自己想要备份的博客。Git、GitHub环境已准备好。</p><h2 id="备份博客"><a href="#备份博客" class="headerlink" title="备份博客"></a>备份博客</h2><p><strong>新建仓库</strong><br>新建一个仓库，自己命名，比如我的是hexo-back-up，勾选README</p><p><strong>获取 .git文件夹</strong><br>原始的博客文件夹只有.deploy_git，是没有.git文件夹的，于是我们先去桌面或者哪里随便一个地方，把刚刚的hexo-back-up给clone下来。然后剪切出里面的.git文件夹，复制到现在的博客文件夹中</p><p><strong>创建.gitignore</strong><br>用来在上传时候忽略一些文件，即不上传.gitignore中忽略的文件。有就就不用管了，没有的话自己手动创建创建.gitignore。</p><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了</p><p><strong>备份</strong><br>通过如下命令将本地文件备份到Github上。<br>在hexo博客的根目录下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;back up&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>这样就备份完博客了且在Github上能看到，其中node_modules、public、db.json已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><h2 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h2><p>先把本地Hexo博客基础环境搭好：比如安装git、nodejs、hexo…</p><p><strong>克隆源文件到本地</strong></p><p>如果在新电脑或者重装系统后恢复的话可能需要重新生成SSH密钥，并更新github密钥配置。</p><p><strong>恢复博客</strong><br>在clone下来的那个文件夹里面执行<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><br>在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。<br>然后就完成了，你如果想也可以<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>如果想用Github Action自动部署博客的话参考<a href="https://siqindong.com/2022/02/01/Deploy-Hexo-blog-automatically-by-Github-Action/">这篇博客</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.quickso.cn/2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/">https://blog.quickso.cn/2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考&lt;a href=&quot;https://blog.quickso.cn/2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://siqindong.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Deploy Hexo blog automatically by Github Action</title>
    <link href="https://siqindong.com/2022/02/01/Deploy-Hexo-blog-automatically-by-Github-Action/"/>
    <id>https://siqindong.com/2022/02/01/Deploy-Hexo-blog-automatically-by-Github-Action/</id>
    <published>2022-02-01T21:21:43.000Z</published>
    <updated>2022-02-01T21:48:07.371Z</updated>
    
    <content type="html"><![CDATA[<p>在博客的站点配置文件<code>_config.yml</code>中将博客仓库地址从https地址和改为ssh地址，已经是ssh地址的跳过。</p><p>生成 SSH Key，不是第一次生成的话用一下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_x -C &quot;yourmail@xxx.com&quot;</span><br></pre></td></tr></table></figure><p>将生成的 <code>private key</code> 作为 Hexo 源文件仓库 <code>Settings &gt; Secrets &gt; Actions</code> 的 一个名叫 DEPLOY_KEY 的 Secret。注意：需要复制包括 ——-BEGIN OPENSSH PRIVATE KEY——- 和 ——-END OPENSSH PRIVATE KEY——- 的整个内容。</p><p>将生成的 <code>public key</code> 作为网站文件仓库 <code>Settings &gt; Deploy Keys</code> 的 Deploy Key。随便取个名字。</p><p>在博客源文件根目录<code>.github/workflows</code> 下，创建一个名为<code>action</code>，后缀为<code>.yml</code>的文件。如果没有<code>workflows</code>文件夹就自己创建一个。</p><p>下面是<code>action.yml</code>里的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">name: Hexo Deploy</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-18.04</span><br><span class="line">    if: github.event.repository.owner.id == github.event.sender.id</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout source</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          ref: main</span><br><span class="line"></span><br><span class="line">      - name: Setup Node.js</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: &#x27;12&#x27;</span><br><span class="line"></span><br><span class="line">      - name: Setup Hexo</span><br><span class="line">        env:</span><br><span class="line">          ACTION_DEPLOY_KEY: $&#123;&#123; secrets.DEPLOY_KEY &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 700 ~/.ssh</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.email &quot;your email&quot;</span><br><span class="line">          git config --global user.name &quot;your username&quot;</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: Deploy</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo generate</span><br><span class="line">          hexo deploy</span><br></pre></td></tr></table></figure><p>对应修改自己的用户名和邮箱即可。</p><p>我个人每次修改完博客的习惯：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;back up&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/deppwang/p/12326906.html">https://www.cnblogs.com/deppwang/p/12326906.html</a><br><a href="https://github.com/DeppWang/hexo-action">https://github.com/DeppWang/hexo-action</a><br><a href="https://cyfeng.science/2020/12/02/use-github-action-to-automatically-deploy-hexo/">https://cyfeng.science/2020/12/02/use-github-action-to-automatically-deploy-hexo/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在博客的站点配置文件&lt;code&gt;_config.yml&lt;/code&gt;中将博客仓库地址从https地址和改为ssh地址，已经是ssh地址的跳过。&lt;/p&gt;
&lt;p&gt;生成 SSH Key，不是第一次生成的话用一下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight pl</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://siqindong.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Fourier Transform</title>
    <link href="https://siqindong.com/2021/10/20/Fourier-Transform/"/>
    <id>https://siqindong.com/2021/10/20/Fourier-Transform/</id>
    <published>2021-10-20T23:49:46.000Z</published>
    <updated>2022-02-01T20:21:57.235Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对B站UP主<a href="https://space.bilibili.com/230105574?spm_id_from=333.788.b_765f7570696e666f.1">Dr.CAN</a>傅里叶变换系列视频的整理。</p><h2 id="三角函数的正交性"><a href="#三角函数的正交性" class="headerlink" title="三角函数的正交性"></a>三角函数的正交性</h2><p><strong>三角函数系</strong>：<br>三角函数系是一个集合：</p><script type="math/tex; mode=display">\begin{align*} \lbrace1,\sin 1x,\cos 1x,\sin 2x,\cos 2x\ldots\sin nx,\cos nx\ldots\rbrace\end{align*}</script><p>即</p><script type="math/tex; mode=display">\begin{align*}1, \sin nx, \cos nx \quad n = 1,2,3 \ldots\end{align*}</script><p><strong>正交的概念</strong>：<br>正交是一种二元关系，可以先从二维或三维世界里的垂直来理解，比如两个向量 $\vec a$ 和 $\vec b$，夹角 $\phi$ 为 90 $^\circ$，内积 $\vec a\cdot\vec b = \vert\vec a\vert\vert\vec b\vert\cos \phi = 0$，所以如果两个向量正交，他们的内积等于0。把 $\vec a$ 和 $\vec b$ 在平面坐标系表达出来，比如 $\vec a(2,1)$ 和 $\vec b(-1,2)$，内积 $\vec a\cdot\vec b = 2\times(-1)+1\times2 = 0$。</p><p>如果每个向量含有三个元素，比如 $\vec a(1,2,5)$ 和 $\vec b(1,2,-1)$，内积 $\vec a\cdot\vec b = 1\times1+2\times2+5\times (-1) = 0$。</p><p>扩展一下，如果每个向量含有$n$个元素，$\vec a(a_1,a_2,\ldots a_n)$，$\vec b(b_1,b_2,\ldots b_n)$，则</p><script type="math/tex; mode=display">\begin{align*} \vec a\cdot\vec b &= a_1b_1+a_2b_2+a_3b_3+\ldots+a_nb_n \\&= \sum_{i=1}^na_ib_i \\\end{align*}</script><p>继续扩展，如果 $a$ 是一个函数 $f(x)$，$b$ 是一个函数 $g(x)$，且在区间 [$x_0$,$x_1$] 上有定义，如果在区间 [$x_0$,$x_1$] 上一一对应地将 $f(x)$ 和 $g(x)$ 的值相乘，最后将所有乘积相加，因为 $f(x)$ 和 $g(x)$ 是连续函数，所以加和就是在 [$x_0$,$x_1$] 取积分，若积分等于0：</p><script type="math/tex; mode=display">\begin{align*} \int_{x_0}^{x_1}f(x)g(x) \,{\rm d}x = 0\end{align*}</script><p>那么函数 $f(x)$ 和 $g(x)$ 在区间 [$x_0$,$x_1$] 正交。</p><p>三角函数的正交性是说从上面的三角函数系中，任取两个<strong>不同</strong>的函数相乘，然后在 $[-\pi,\pi]$ 积分，结果等于0：</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\sin nx\cos mx \,{\rm d}x = 0 \quad n = m\end{align*}</script><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\sin nx\cos mx \,{\rm d}x = 0 \quad n \neq m\end{align*}</script><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\sin nx\sin mx \,{\rm d}x = 0 \quad n \neq m\end{align*}</script><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\cos nx\cos mx \,{\rm d}x = 0 \quad n \neq m\end{align*}</script><p>若三角函数系中<strong>相同</strong>的两个函数相乘，然后在 $[-\pi,\pi]$ 积分，结果等于 $\pi$ ：</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\sin nx\sin mx \,{\rm d}x = \pi \quad n = m\end{align*}</script><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\cos nx\cos mx \,{\rm d}x = \pi \quad n = m\end{align*}</script><p>下面来证明一下，若$\,n \neq m$ ：</p><p>根据积化和差公式：$\sin nx\cos mx = \frac{1}{2}[\sin (n+m)x + \sin (n-m)x]$</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\sin nx\cos mx \,{\rm d}x &= \int_{-\pi}^{\pi}\frac{1}{2} [\sin (n+m)x + \sin (n-m)x] \,{\rm d}x \\&= \frac{1}{2}\underbrace{\int_{-\pi}^{\pi}\sin (n+m)x \,{\rm d}x}_0 + \frac{1}{2}\underbrace{\int_{-\pi}^{\pi}\sin (n-m)x \,{\rm d}x}_0 \\&= 0\end{align*}</script><p>根据积化和差公式：$\sin nx\sin mx = -\frac{1}{2}[\cos (n+m)x - \cos (n-m)x]$</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\sin nx\sin mx \,{\rm d}x &= \int_{-\pi}^{\pi}-\frac{1}{2} [\cos (n+m)x - \cos (n-m)x] \,{\rm d}x \\&= -\frac{1}{2}\underbrace{\int_{-\pi}^{\pi}\cos (n+m)x \,{\rm d}x}_0 + \frac{1}{2}\underbrace{\int_{-\pi}^{\pi}\cos (n-m)x \,{\rm d}x}_0 \\&= 0\end{align*}</script><p>根据积化和差公式：$\cos nx\cos mx = \frac{1}{2}[\cos (n+m)x + \cos (n-m)x]$</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\cos nx\cos mx \,{\rm d}x &= \int_{-\pi}^{\pi}\frac{1}{2} [\cos (n+m)x + \cos (n-m)x] \,{\rm d}x \\&= \frac{1}{2}\underbrace{\int_{-\pi}^{\pi}\cos (n+m)x \,{\rm d}x}_0 + \frac{1}{2}\underbrace{\int_{-\pi}^{\pi}\cos (n-m)x \,{\rm d}x}_0 \\&= 0\end{align*}</script><p>若$\,n = m$ ：</p><p>根据积化和差公式：$\sin nx\cos mx = \frac{1}{2}[\sin 2mx]$</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\sin nx\cos mx \,{\rm d}x &= \int_{-\pi}^{\pi}\frac{1}{2} [\sin 2mx] \,{\rm d}x \\&= \frac{1}{2}\underbrace{\int_{-\pi}^{\pi}\sin 2mx \,{\rm d}x}_0 \\&= 0\end{align*}</script><p>根据积化和差公式：$\sin nx\sin mx = -\frac{1}{2}[\cos 2mx - 1]$</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\sin nx\sin mx \,{\rm d}x &= \int_{-\pi}^{\pi}-\frac{1}{2}[\cos 2mx - 1] \,{\rm d}x \\&= -\frac{1}{2}\underbrace{\int_{-\pi}^{\pi}\cos 2mx \,{\rm d}x}_0 + \frac{1}{2}\underbrace{\int_{-\pi}^{\pi}1 \,{\rm d}x}_{2\pi} \\&= \pi\end{align*}</script><p>根据积化和差公式：$\cos nx\cos mx = \frac{1}{2}[\cos 2mx + 1]$</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}\cos nx\cos mx \,{\rm d}x &= \int_{-\pi}^{\pi}\frac{1}{2}[\cos 2mx + 1] \,{\rm d}x \\&= \frac{1}{2}\underbrace{\int_{-\pi}^{\pi}\cos 2mx \,{\rm d}x}_0 + \frac{1}{2}\underbrace{\int_{-\pi}^{\pi}1 \,{\rm d}x}_{2\pi} \\&= \pi\end{align*}</script><p><br></p><h2 id="周期为-2-pi-的函数展开为傅里叶级数"><a href="#周期为-2-pi-的函数展开为傅里叶级数" class="headerlink" title="周期为$\,2\pi\,$的函数展开为傅里叶级数"></a>周期为$\,2\pi\,$的函数展开为傅里叶级数</h2><p>一个周期为$\,2\pi\,$的函数，$T = 2\pi$，$f(x) = f(x+2\pi)$，可以展开为三角级数，也就是一系列三角函数的加和：</p><script type="math/tex; mode=display">\begin{align*} f(x) &= \sum_{n=0}^\infty a_n \cos nx + \sum_{n=0}^\infty b_n \sin nx \\&= a_0\underbrace{\cos 0x}_1 + \sum_{n=1}^\infty a_n \cos nx + b_0\underbrace{\sin 0x}_0 + \sum_{n=1}^\infty b_n \sin nx \\&= a_0 + \sum_{n=1}^\infty a_n \cos nx + \sum_{n=1}^\infty b_n \sin nx \tag{1}\label{eq1}\end{align*}</script><h3 id="第一步：求-a-0"><a href="#第一步：求-a-0" class="headerlink" title="第一步：求$\,a_0\,$"></a>第一步：求$\,a_0\,$</h3><p>对等式左右两边每一项在 $[-\pi,\pi]$ 积分：</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}f(x)\,{\rm d}x &= \int_{-\pi}^{\pi}a_0\,{\rm d}x + \int_{-\pi}^{\pi}\sum_{n=1}^\infty a_n \cos nx\,{\rm d}x + \int_{-\pi}^{\pi}\sum_{n=1}^\infty b_n \sin nx\,{\rm d}x \\&= \int_{-\pi}^{\pi}a_0\,{\rm d}x + \sum_{n=1}^\infty a_n \underbrace{\int_{-\pi}^{\pi} \cos nx\,{\rm d}x}_0 + \sum_{n=1}^\infty b_n \underbrace{\int_{-\pi}^{\pi} \sin nx\,{\rm d}x}_0 \\&= a_0\int_{-\pi}^{\pi}1\,{\rm d}x \\&= a_0x\Big|_{-\pi}^{\pi} \\&= 2\pi a_0 \\\end{align*}</script><p>求出$\,\eqref{eq1}\,$中的$\,a_0\,$:</p><script type="math/tex; mode=display">\begin{align*} a_0 = \frac{1}{2\pi} \int_{-\pi}^{\pi}f(x)\,{\rm d}x\end{align*}</script><p>如果我们把$\,a_0\,$放大2倍（但仍然用$\,a_0\,$表示）：</p><script type="math/tex; mode=display">\begin{align*} a_0 &= \frac{1}{\pi} \int_{-\pi}^{\pi}f(x)\,{\rm d}x\end{align*}</script><p>代入$\,\eqref{eq1}\,$中，就需要缩小2倍：</p><script type="math/tex; mode=display">\begin{align*} f(x) = \frac{a_0}{2} + \sum_{n=1}^\infty a_n \cos nx + \sum_{n=1}^\infty b_n \sin nx \tag{2}\label{eq2}\end{align*}</script><blockquote><p><strong>Note</strong></p><ul><li>$\eqref{eq2}\,$就是很多教科书上给出的公式了，将$\,a_0\,$换为$\,\frac{a_0}{2}\,$似乎显得没有必要，其实这样做是为了和后面的$\,a_n\,$和$\,b_n\,$的格式统一，下面我们求出$\,a_n\,$和$\,b_n\,$就知道这样做的好处了。</li></ul></blockquote><h3 id="第二步：求-a-n"><a href="#第二步：求-a-n" class="headerlink" title="第二步：求$\,a_n\,$"></a>第二步：求$\,a_n\,$</h3><p>对 $\,\eqref{eq2}\,$ 左右两边每一项乘以$\,\cos mx\,$，$m\,$为定值，任取 $\,0,1,2\ldots\,$，然后在 $[-\pi,\pi]$ 积分：</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}f(x)\cos mx\,{\rm d}x &= \int_{-\pi}^{\pi}\frac{a_0}{2}\cos mx\,{\rm d}x + \int_{-\pi}^{\pi}\sum_{n=1}^\infty a_n \cos nx\cos mx\,{\rm d}x + \int_{-\pi}^{\pi}\sum_{n=1}^\infty b_n \sin nx\cos mx\,{\rm d}x \\&= \frac{a_0}{2}\underbrace{\int_{-\pi}^{\pi}\cos mx\,{\rm d}x}_0 + \sum_{n=1}^\infty a_n \int_{-\pi}^{\pi} \cos nx\cos mx\,{\rm d}x + \sum_{n=1}^\infty b_n \underbrace{\int_{-\pi}^{\pi} \sin nx\cos mx\,{\rm d}x}_0\end{align*}</script><p>由前面三角函数系的正交性可以知道式子右边第1项和第3项都为0，只剩下第2项：</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}f(x)\cos mx\,{\rm d}x &= \sum_{n=1}^\infty a_n \int_{-\pi}^{\pi} \cos nx\cos mx\,{\rm d}x \\\end{align*}</script><p>分析一下，第2项中存在$\,n = m\,$ 和 $\,n \neq m\,$两种情况，由前面三角函数系的正交性可以知道所有$\,n \neq m\,$的项都为0，所以只剩下$\,n = m\,$的那一项留下来了，上面的式子中的加和只剩下了一项：</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}f(x)\cos nx\,{\rm d}x &=a_n \underbrace{\int_{-\pi}^{\pi}\cos nx\cos nx\,{\rm d}x}_\pi \\\end{align*}</script><p>求出$\,a_n\,$:</p><script type="math/tex; mode=display">\begin{align*} a_n &= \frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\cos nx\,{\rm d}x \\\end{align*}</script><h3 id="第三步：求-b-n"><a href="#第三步：求-b-n" class="headerlink" title="第三步：求$\,b_n\,$"></a>第三步：求$\,b_n\,$</h3><p>对 $\,\eqref{eq2}\,$ 左右两边每一项乘以$\,\sin mx\,$，$m\,$为定值,任取 $1,2,3\ldots\,$，然后在 $[-\pi,\pi]$ 积分：</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}f(x)\sin mx\,{\rm d}x &= \int_{-\pi}^{\pi}\frac{a_0}{2}\sin mx\,{\rm d}x + \int_{-\pi}^{\pi}\sum_{n=1}^\infty a_n \cos nx\sin mx\,{\rm d}x + \int_{-\pi}^{\pi}\sum_{n=1}^\infty b_n \sin nx\sin mx\,{\rm d}x \\&= \frac{a_0}{2}\underbrace{\int_{-\pi}^{\pi}\sin mx\,{\rm d}x}_0 + \sum_{n=1}^\infty a_n \underbrace{\int_{-\pi}^{\pi} \cos nx\sin mx\,{\rm d}x}_0 + \sum_{n=1}^\infty b_n \int_{-\pi}^{\pi} \sin nx\sin mx\,{\rm d}x\end{align*}</script><p>由前面三角函数系的正交性可以知道式子右边第1项和第2项都为0，只剩下第3项：</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}f(x)\sin mx\,{\rm d}x &= \sum_{n=1}^\infty b_n \int_{-\pi}^{\pi} \sin nx\sin mx\,{\rm d}x \\\end{align*}</script><p>同样，第3项中存在$\,n = m\,$ 和 $\,n \neq m\,$两种情况，由前面三角函数系的正交性可以知道所有$\,n \neq m\,$的项都为0，所以只剩下$\,n = m\,$的那一项留下来了，上面的式子中的加和只剩下了一项：</p><script type="math/tex; mode=display">\begin{align*} \int_{-\pi}^{\pi}f(x)\sin nx\,{\rm d}x &=b_n \underbrace{\int_{-\pi}^{\pi}\sin nx\sin nx\,{\rm d}x}_\pi \\\end{align*}</script><p>求出$\,b_n\,$:</p><script type="math/tex; mode=display">\begin{align*} b_n &= \frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\sin nx\,{\rm d}x \\\end{align*}</script><p>好了，到此为止我们就求出了$\,\eqref{eq2}\,$中的$\,a_0\,$，$a_n\,$，$b_n\,$，这样就得出了一个周期为$\,2\pi\,$的函数的傅里叶级展开：</p><p>$T = 2\pi$，$f(x) = f(x+2\pi)$</p><script type="math/tex; mode=display">\begin{align*} f(x) = \frac{a_0}{2} + \sum_{n=1}^\infty [a_n \cos nx + b_n \sin nx]\end{align*}</script><p>其中：</p><script type="math/tex; mode=display">\begin{align*} a_0 &= \frac{1}{\pi} \int_{-\pi}^{\pi}f(x)\,{\rm d}x \\a_n &= \frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\cos nx\,{\rm d}x \\b_n &= \frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\sin nx\,{\rm d}x \\\end{align*}</script><p>现在能发现为什么第一步求$\,a_0\,$时最后将$\,a_0\,$换为$\,\frac{a_0}{2}\,$了。</p><p><br></p><h2 id="周期为-2L-的函数展开为傅里叶级数"><a href="#周期为-2L-的函数展开为傅里叶级数" class="headerlink" title="周期为$\,2L\,$的函数展开为傅里叶级数"></a>周期为$\,2L\,$的函数展开为傅里叶级数</h2><p>下面讨论周期不是$\,2\pi\,$而是其他任意值的函数的傅里叶级数展开</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是对B站UP主&lt;a href=&quot;https://space.bilibili.com/230105574?spm_id_from=333.788.b_765f7570696e666f.1&quot;&gt;Dr.CAN&lt;/a&gt;傅里叶变换系列视频的整理。&lt;/p&gt;
&lt;h2 id=&quot;三角函数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Read and analyze rosbag data in Matlab</title>
    <link href="https://siqindong.com/2021/03/16/Read-and-analyze-rosbag-data-in-Matlab/"/>
    <id>https://siqindong.com/2021/03/16/Read-and-analyze-rosbag-data-in-Matlab/</id>
    <published>2021-03-17T01:09:58.000Z</published>
    <updated>2022-02-01T20:21:57.236Z</updated>
    
    <content type="html"><![CDATA[<p>I was experimenting with the Sawyer robot and using <code>rosbag</code> to record the robot status data, which need to be visualized and analyzed later. Usually the built-in <code>rqt_plot</code> in ROS can be used to have a overview of the data. However, <code>rqt_plot</code> is relatively simple and not handy when the data size is large. So it is better to import data into Matlab for analysis.</p><p>Matlab can directly read rosbag data. For topics common used in ROS, such as <code>/joint_states</code> and <code>/cmd_vel</code>, it is very convenient to use Matlab to read. However, topics that use a custom message type, you will need to recompile the ROS package that stores the msg file. This step can be completed using <a href="https://www.mathworks.com/help/ros/ref/rosgenmsg.html"><code>rosgenmsg</code></a> command in Matlab, with the help of Matlab’s java interface, Matlab will be able to recognize the custom message.</p><p>My Matlab version is R2021a when I was writing this blog. Note that in the R2020b version, Matlab’s support for ROS has been greatly changed. <code>rosgenmsg</code> is directly included in the toolbox (no additional support package is required). You may found some online tutorials use the <code>roboticsAddons</code> command to install <code>rosgenmsg</code> plugin, maybe the Matlab version they used is before R2020b. You may read this official document directly in the future: <a href="https://www.mathworks.com/help/ros/ug/ros-custom-message-support.html">ROS Custom Message Support</a>, just follow the documentation step by step, purpose of this blog is mainly to record some tricky problems that need attention when the first time you are dealing with it.</p><h2 id="Update-Cmake-version"><a href="#Update-Cmake-version" class="headerlink" title="Update Cmake version"></a>Update Cmake version</h2><p>Make sure your Cmake version is <strong>3.15.5</strong> or later, this requirement can be found in official Matlab document <a href="https://www.mathworks.com/help/ros/gs/ros-system-requirements.html">ROS System Requirements</a>.</p><p><strong>Check your current Cmake version:</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure><br>If the version is older than 3.15.5, it needs to be updated. The most common way is directly with <code>sudo apt-get install cmake</code> in the Linux terminal, but after installation, you may found the version is still older than the required version, such as Ubuntu 16.04 I was using, I can only get 3.5.1. The reason why I can not install the latest version with <code>sudo apt-get install cmake</code> is that the repositories of the operating system itself have not been updated. 16.04 is the long-term support (LTS) version of Ubuntu, and it must be stable within 5 years. Generally, only critical or security updates are performed, and the latest versions of packages are not updated frequently, usually every 6 months.</p><p><strong>Recommended installation method:</strong></p><ul><li>Uninstall the default version provided by Ubuntu:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove --purge --auto-remove cmake</span><br></pre></td></tr></table></figure>Or<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge --auto-remove cmake</span><br></pre></td></tr></table></figure></li><li>Go to <a href="https://cmake.org/download/">CMake official website download interface</a>, check the Cmake version number, and determine the version to be installed (modify the version and build variables to the required version number, following example: 3.19.1):<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">version=3.19</span><br><span class="line">build=1</span><br></pre></td></tr></table></figure></li><li>Create a temp folder to store the cmake source package, and download the cmake source package:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/temp</span><br><span class="line">cd ~/temp</span><br><span class="line">wget https://cmake.org/files/v$version/cmake-$version.$build.tar.gz</span><br></pre></td></tr></table></figure></li><li>Unzip the source package:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf cmake-$version.$build.tar.gz</span><br></pre></td></tr></table></figure></li><li>Enter the unzipped cmake directory:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd cmake-$version.$build/</span><br></pre></td></tr></table></figure></li><li><p>Install cmake：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bootstrap</span><br><span class="line">make -j$(nproc)</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong>: </p><ul><li>Because I have a multi-core CPU, the <code>make -j$(nproc)</code> command is used here for parallel compilation, just using <code>make</code> is also ok, the <code>nproc</code> information can be found <a href="https  https://www.howtoforge.com/linux-nproc-command/">here</a></li><li><code>make install</code> command requires root privilege</li></ul></blockquote></li><li><p>Finally, open a <strong>new terminal</strong> and check the Cmake version:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong>: </p><ul><li><code>cmake --version</code> is only valid in a new terminal, because for the method used above, Cmake will be installed in <code>/usr/local/bin/</code> by default, and if you use the <code>sudo apt-get install cmake</code> mentioned at the beginning, the default installation path will be <code>/usr/bin/</code>, the reason can be seen <a href="https://unix.stackexchange.com/questions/8656/usr-bin-vs-usr-local-bin-on-linux">This answer</a> on StackExchange：<code>/usr/local/bin</code> is for normal user programs not managed by the distribution package manager, e.g. locally compiled packages. You should not install them into <code>/usr/bin</code> because future distribution upgrades may modify or delete them without warning.</li></ul></blockquote><p>  Result after running <code>cmake --version</code>:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake version 3.19.1</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure></li></ul><h2 id="Confirm-Cmake-path"><a href="#Confirm-Cmake-path" class="headerlink" title="Confirm Cmake path"></a>Confirm Cmake path</h2><p>After updating the Cmake version, in order to ensure Cmake is available in Matlab, you need to check Cmake is on the environment variables of Matlab: </p><ul><li>First, check the Cmake path in the Linux terminal. As mentioned above, Cmake will be installed by default in <code>/usr/local/bin/</code>, which can be check in the terminal:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which cmake</span><br></pre></td></tr></table></figure>Result：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/cmake</span><br></pre></td></tr></table></figure></li><li>Then open <strong>Mtalab</strong> and run the command:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!which cmake</span><br></pre></td></tr></table></figure>The result should be consistent with the path found in the Linux terminal earlier:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/cmake</span><br></pre></td></tr></table></figure></li><li>Finally, check the Cmake version in Matlab:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!cmake --version</span><br></pre></td></tr></table></figure>The running result should be consistent with the version number found in the Linux terminal earlier:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake version 3.19.1</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure></li></ul><h2 id="Compile-the-custom-message"><a href="#Compile-the-custom-message" class="headerlink" title="Compile the custom message"></a>Compile the custom message</h2><p>Here I use the ROS package <code>intera_core_msgs</code> provided by Sawyer as an example. The custom message file is in <code>msg</code> folder. I first create a folder <code>custom_msgs</code>, and create a folder <code>sawyer_custom_msg_matlab</code> inside it to contain the package, other packages also can be placed in this folder in the future. I copied the <code>intera_core_msgs</code> package directly from <a href="https://github.com/RethinkRobotics/intera_common/tree/master/intera_core_msgs">Github</a>, which has already generated and configured <code>CmakeLists.txt</code> and <code>package.xml</code> file, if you wish to create a ROS package yourself, don’t forget to modify these two files. The following <code>matlab_msg_gen_ros1</code> folder is generated by compiling with Matlab, which will be demonstrated below.</p><div align="center">  <img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/1.png"></div><p><br></p><blockquote><p><strong>Note</strong></p><ul><li>Only msg is used here, I did not copy <code>srv</code> when coping the <code>intera_core_msgs</code> package, I can add it when it is needed.</li><li>ROS actions are not supported currently, it will be ignored during custom message generation.</li></ul></blockquote><p>Next, you can use the <a href="https://www.mathworks.com/help/ros/ref/rosgenmsg.html"><code>rosgenmsg</code></a> command to compile in Matlab:</p><ul><li>Declare the path of the ROS package where the custom message is located:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sawyer_folder = <span class="string">&#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab&#x27;</span></span><br></pre></td></tr></table></figure>Result:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sawyer_folder =</span><br><span class="line"></span><br><span class="line">    &#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab&#x27;</span><br></pre></td></tr></table></figure></li><li>Call rosgenmsg:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosgenmsg(sawyer_folder)</span><br></pre></td></tr></table></figure>Result：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Identifying message files in folder &#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab&#x27;..Done.</span><br><span class="line">Validating message files in folder &#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab&#x27;..Done.</span><br><span class="line">[1/1] Generating MATLAB interfaces for custom message packages... Done.</span><br><span class="line">Running catkin build in folder &#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab/matlab_msg_gen_ros1/glnxa64&#x27;.</span><br><span class="line">Build in progress. This may take several minutes...</span><br><span class="line">Build succeeded.build log</span><br><span class="line"> </span><br><span class="line">To use the custom messages, follow these steps:</span><br><span class="line"> </span><br><span class="line">1. Add the custom message folder to the MATLAB path by executing:</span><br><span class="line"> </span><br><span class="line">addpath(&#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab/matlab_msg_gen_ros1/glnxa64/install/m&#x27;)</span><br><span class="line">savepath</span><br><span class="line"> </span><br><span class="line">2. Refresh all message class definitions, which requires clearing the workspace, by executing:</span><br><span class="line"> </span><br><span class="line">clear classes</span><br><span class="line">rehash toolboxcache</span><br><span class="line"> </span><br><span class="line">3. Verify that you can use the custom messages. </span><br><span class="line">   Enter &quot;rosmsg list&quot; and ensure that the output contains the generated</span><br><span class="line">   custom message types.</span><br></pre></td></tr></table></figure></li><li>Then follow the instructions above to add environment variables, clear the workspace, and run the following commands one by one:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addpath(<span class="string">&#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab/matlab_msg_gen_ros1/glnxa64/install/m&#x27;</span>)</span><br><span class="line">savepath</span><br><span class="line">clear classes</span><br><span class="line">rehash toolboxcache</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong><br>When executing <code>savepath</code>, if you are prompted that the Matlab path file cannot be modified, there are two solutions:</p><ul><li>Method 1: Modify permissions in the current Matlab command window:<br>Check pathdef path:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which pathdef</span><br></pre></td></tr></table></figure>Result：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/MATLAB/R2021a/toolbox/local/pathdef.m</span><br></pre></td></tr></table></figure>Modify it so that all users have read and write permissions:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">666</span> /usr/local/MATLAB/R2018a/toolbox/local/pathdef.m</span><br></pre></td></tr></table></figure></li><li>Method 2: Reopen Matlab with <code>sudo matlab</code> in the Linux terminal</li></ul></blockquote></li></ul><p>Finally, use to see if the custom message types are successfully generated：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg list</span><br></pre></td></tr></table></figure><br>We can see that all custom messages in the <code>msg</code> folder under the <code>intera_core_msgs</code> package have been successfully generated:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">intera_core_msgs/AnalogIOState                                 </span><br><span class="line">intera_core_msgs/AnalogIOStates                                </span><br><span class="line">intera_core_msgs/AnalogOutputCommand                           </span><br><span class="line">intera_core_msgs/CameraControl                                 </span><br><span class="line">intera_core_msgs/CameraSettings                                </span><br><span class="line">intera_core_msgs/CollisionAvoidanceState                       </span><br><span class="line">intera_core_msgs/CollisionDetectionState                       </span><br><span class="line">intera_core_msgs/DigitalIOState                                </span><br><span class="line">intera_core_msgs/DigitalIOStates                               </span><br><span class="line">intera_core_msgs/DigitalOutputCommand                          </span><br><span class="line">intera_core_msgs/EndpointNamesArray                            </span><br><span class="line">intera_core_msgs/EndpointState                                 </span><br><span class="line">intera_core_msgs/EndpointStates                                </span><br><span class="line">intera_core_msgs/HeadPanCommand                                </span><br><span class="line">intera_core_msgs/HeadState                                     </span><br><span class="line">intera_core_msgs/HomingCommand                                 </span><br><span class="line">intera_core_msgs/HomingState                                   </span><br><span class="line">intera_core_msgs/IOComponentCommand                            </span><br><span class="line">intera_core_msgs/IOComponentConfiguration                      </span><br><span class="line">intera_core_msgs/IOComponentStatus                             </span><br><span class="line">intera_core_msgs/IODataStatus                                  </span><br><span class="line">intera_core_msgs/IODeviceConfiguration                         </span><br><span class="line">intera_core_msgs/IODeviceStatus                                </span><br><span class="line">intera_core_msgs/IONodeConfiguration                           </span><br><span class="line">intera_core_msgs/IONodeStatus                                  </span><br><span class="line">intera_core_msgs/IOStatus                                      </span><br><span class="line">intera_core_msgs/InteractionControlCommand                     </span><br><span class="line">intera_core_msgs/InteractionControlState                       </span><br><span class="line">intera_core_msgs/JointCommand                                  </span><br><span class="line">intera_core_msgs/JointLimits                                   </span><br><span class="line">intera_core_msgs/NavigatorState                                </span><br><span class="line">intera_core_msgs/NavigatorStates                               </span><br><span class="line">intera_core_msgs/RobotAssemblyState                            </span><br><span class="line">intera_core_msgs/SEAJointState                                 </span><br><span class="line">intera_core_msgs/URDFConfiguration  </span><br></pre></td></tr></table></figure></p><h2 id="Rosbag-data-processing"><a href="#Rosbag-data-processing" class="headerlink" title="Rosbag data processing"></a>Rosbag data processing</h2><p>Next, I will take the custom message <code>intera_core_msgs/EndpointState</code> as an example, and use Matlab to process the robot data recorded by <code>rosbag</code>.</p><ul><li><strong>Read bag file</strong>:  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bag = rosbag(<span class="string">&#x27;/home/siqin/catkin_ws/sawyer_end_point_state.bag&#x27;</span>);</span><br></pre></td></tr></table></figure>  After running, click the bag variable in the Workspace to get the information shown in the following figure:  <div align="center">  <img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/2.png">  </div></li></ul><p><br></p><ul><li><p><strong>Select Topic</strong><br>  Click AvailableTopics in the above picture to review what topics are recorded. I only recorded one topic <code>/robot/limb/right/endpoint_state</code> here, as shown in the following figure:</p>  <div align="center">  <img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/3.png">  </div><p>  After reviewing the topic, use the <code>select</code> function to select the topic name to be processed:</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state_select = select(bag, <span class="string">&#x27;Time&#x27;</span>,[bag.StartTime bag.EndTime], <span class="string">&#x27;Topic&#x27;</span>, <span class="string">&#x27;/robot/limb/right/endpoint_state&#x27;</span>);</span><br></pre></td></tr></table></figure><p>  In the figure as shown above, you may also notice that the <code>intera_core_msgs/EndpointState</code> in the MessageType column is the message we customized before.</p><p>  <br></p></li><li><p><strong>Use the <code>readMessages</code> function to read the data selected by the <code>select</code> function</strong></p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stateMsgs = readMessages(state_select);</span><br></pre></td></tr></table></figure><p>  After running, click the stateMsgs variable in the Workspace to get the information shown in the following figure:</p>  <div align="center">  <img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/4.png">  </div><p>  <br></p><p>  You can see that stateMsgs is a 1408x1 array, which contains 1408 message data records, click on the first one:</p>  <div align="center">  <img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/5.png">  </div><p>  The figure above shows the data structure that defines <code>intera_core_msgs/EndpointState</code>. We can first look at the content in the Linux terminal:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg show intera_core_msgs/EndpointState</span><br></pre></td></tr></table></figure><p>  Result：</p>  <div align="center">  <img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/6.png">  </div><p>  <br></p><p>  We can see that <code>intera_core_msgs/EndpointState</code> uses two ROS built-in messages <a href="https://wiki.ros.org/std_msgs"><code>std_msgs</code></a> and <a href="https://wiki.ros.org/geometry_msgs"><code>geometry_msgs</code></a>, <code>intera_core_msgs/EndpointState</code> mainly contains the following information of the robot TCP:</p><blockquote><p><strong>pose:</strong></p><ul><li>positon: x y z coordinates</li><li>orinentation: represented by quaternions </li></ul><p><strong>twist (a screw, 6-dimensional vector):</strong></p><ul><li>linear: linear velocity along an axis, a 3-dimensional vector</li><li>angular: angular velocity about an axis, a 3-dimensional vector</li></ul><p><strong>wrench (a screw, 6-dimensional vector):</strong> </p><ul><li>force: a 3-dimensional vector</li><li>torque: a 3-dimensional vector</li></ul><p><strong>Note:</strong> Quaternion and Screw theory will be discussed separately later if I have time.</p></blockquote><p>  Take the position in pose as an example: click 1x1 Pose in the stateMsgs shown in the above figure, get the information shown in the figure below:</p>  <div align="center">  <img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/7.png">  </div><p>  You can see that Pose contains positon and orinentation information, click on positon:</p>  <div align="center">  <img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/8.png">  </div><p>  The positon contains the x y z coordinates of the robot TCP, which are consistent with the results viewed in the terminal. Click on the information of X:</p>  <div align="center">  <img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/9.png">  </div><p>  <br></p><blockquote><p><strong>Note：</strong><br>  The name of each tab in the figure represents the method of accessing the current data. For example, stateMsg{1,1}.Pose.Position.X represents the method of accessing X.</p></blockquote><p>  Next, to visualize the data, we can create a three-dimensional array, and put all the position data into the array:</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TCP_position=<span class="built_in">zeros</span>(<span class="number">1408</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">1408</span></span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">1</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.X;</span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">2</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.Y;</span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">3</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.Z;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>  Draw a trajectory graph:</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">3</span></span><br><span class="line">    <span class="built_in">plot</span>((<span class="number">1</span>:<span class="number">1408</span>),TCP_position(:,<span class="built_in">i</span>),<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">xlabel(<span class="string">&#x27;seq&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Position of End Point&#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;Position.X&#x27;</span>,<span class="string">&#x27;Position.Y&#x27;</span>,<span class="string">&#x27;Position.Z&#x27;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">comet3(position(:,<span class="number">1</span>),position(:,<span class="number">2</span>),position(:,<span class="number">3</span>),<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>  <table>  <tr>      <td ><img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/10.png"></td>      <td ><img src="https://cdn.jsdelivr.net/gh/siqindong/Picbed@main/img/Read and analyze rosbag data in Matlab/11.gif"></td>  </tr>  </table><p>  Complete Matlab code:</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">clear all;</span><br><span class="line">close all;</span><br><span class="line">clc;</span><br><span class="line"></span><br><span class="line">bag = rosbag(<span class="string">&#x27;/home/siqin/catkin_ws/sawyer_end_point_state.bag&#x27;</span>);</span><br><span class="line"></span><br><span class="line">state_select = select(bag, <span class="string">&#x27;Time&#x27;</span>,[bag.StartTime bag.EndTime], <span class="string">&#x27;Topic&#x27;</span>, <span class="string">&#x27;/robot/limb/right/endpoint_state&#x27;</span>);<span class="comment">% &#123;&#x27;intera_core_msgs/EndpointState&#x27;&#125;</span></span><br><span class="line">stateMsgs = readMessages(state_select);</span><br><span class="line"></span><br><span class="line"><span class="comment">% rosmsg show intera_core_msgs/EndpointState</span></span><br><span class="line"><span class="comment">% std_msgs/Header header</span></span><br><span class="line"><span class="comment">%   uint32 seq</span></span><br><span class="line"><span class="comment">%   time stamp</span></span><br><span class="line"><span class="comment">%   string frame_id</span></span><br><span class="line"><span class="comment">% geometry_msgs/Pose pose</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Point position</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Quaternion orientation</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">%     float64 w</span></span><br><span class="line"><span class="comment">% geometry_msgs/Twist twist</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Vector3 linear</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Vector3 angular</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">% geometry_msgs/Wrench wrench</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Vector3 force</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Vector3 torque</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">% bool valid</span></span><br><span class="line"></span><br><span class="line">TCP_position=<span class="built_in">zeros</span>(<span class="number">1408</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">1408</span></span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">1</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.X;</span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">2</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.Y;</span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">3</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.Z;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">3</span></span><br><span class="line">    <span class="built_in">plot</span>((<span class="number">1</span>:<span class="number">1408</span>),TCP_position(:,<span class="built_in">i</span>),<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">xlabel(<span class="string">&#x27;seq&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Position of End Point&#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;Position.X&#x27;</span>,<span class="string">&#x27;Position.Y&#x27;</span>,<span class="string">&#x27;Position.Z&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">comet3(TCP_position(:,<span class="number">1</span>),TCP_position(:,<span class="number">2</span>),TCP_position(:,<span class="number">3</span>),<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://www.mathworks.com/help/ros/ug/ros-custom-message-support.html">https://www.mathworks.com/help/ros/ug/ros-custom-message-support.html</a><br>[2] <a href="https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line">https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line</a><br>[3] <a href="https://www.mathworks.com/matlabcentral/answers/623103-matlab-2020b-rosgenmsg-can-t-find-cmake">https://www.mathworks.com/matlabcentral/answers/623103-matlab-2020b-rosgenmsg-can-t-find-cmake</a><br>[4] <a href="https://blog.csdn.net/yaked/article/details/97682872">https://blog.csdn.net/yaked/article/details/97682872</a><br>[5] <a href="https://blog.csdn.net/weixin_40712763/article/details/78909608">https://blog.csdn.net/weixin_40712763/article/details/78909608</a><br>[6] <a href="https://blog.csdn.net/u012424737/article/details/106766307">https://blog.csdn.net/u012424737/article/details/106766307</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I was experimenting with the Sawyer robot and using &lt;code&gt;rosbag&lt;/code&gt; to record the robot status data, which need to be visualized and </summary>
      
    
    
    
    <category term="Tutorial" scheme="https://siqindong.com/categories/Tutorial/"/>
    
    
    <category term="ROS" scheme="https://siqindong.com/tags/ROS/"/>
    
    <category term="Matlab" scheme="https://siqindong.com/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>在Matlab中读取并分析rosbag数据</title>
    <link href="https://siqindong.com/2021/03/16/%E5%9C%A8Matlab%E4%B8%AD%E8%AF%BB%E5%8F%96%E5%B9%B6%E5%88%86%E6%9E%90rosbag%E6%95%B0%E6%8D%AE/"/>
    <id>https://siqindong.com/2021/03/16/%E5%9C%A8Matlab%E4%B8%AD%E8%AF%BB%E5%8F%96%E5%B9%B6%E5%88%86%E6%9E%90rosbag%E6%95%B0%E6%8D%AE/</id>
    <published>2021-03-17T01:09:58.000Z</published>
    <updated>2022-02-01T20:21:57.236Z</updated>
    
    <content type="html"><![CDATA[<p>我最近在用Sawyer机器人做实验，用<code>rosbag</code>记录了机器人状态数据，后续要进行可视化和分析，虽然ROS内置<code>rqt_plot</code>有绘图功能，但是<code>rqt_plot</code>的功能比较简单，数据量大的时候查看起来也比较麻烦，还是导入进Matlab分析更好一些。</p><p>Matlab可以直接读取rosbag数据，对于ROS自带的topic信息，比如 <code>/joint_states</code> 和 <code>/cmd_vel</code>，用Matlab读取很方便。但是对于使用了自定义的message类型的topic，需要重新编译存放msg文件的ROS package，这一步骤在Matlab中使用<a href="https://www.mathworks.com/help/ros/ref/rosgenmsg.html"><code>rosgenmsg</code></a>命令完成，借助Matlab的java接口，Matlab就能识别自定义的message了。</p><p>我的Matlab版本是R2021a，需要注意的是在R2020b版本中Matlab对ROS功能的支持做了很大改动，<code>rosgenmsg</code> 直接包含在了toolbox中（不需要额外的support package)，网上有的教程写需要通过<code>roboticsAddons</code>命令安装插件，应该用的是R2020b之前的Matlab版本。以后可以直接看这份官方文档：<a href="https://www.mathworks.com/help/ros/ug/ros-custom-message-support.html">ROS Custom Message Support</a>，具体操作跟着文档走即可，这里主要是记录一下需要注意的地方。</p><h2 id="更新Cmake版本"><a href="#更新Cmake版本" class="headerlink" title="更新Cmake版本"></a>更新Cmake版本</h2><p>Cmake版本要确保在<strong>3.15.5</strong>或以上，在Matlab官方文档<a href="https://www.mathworks.com/help/ros/gs/ros-system-requirements.html">ROS System Requirements</a>也可以查到。</p><p><strong>检查你目前的Cmake版本</strong>：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure></p><p>如果版本低于3.15.5则需要更新，最常见的想法可能是直接在Linux终端用<code>sudo apt-get install cmake</code>安装，但是安装完发现是低于要求的版本，比如我用的Ubuntu 16.04，只能得到3.5.1，用<code>sudo apt-get install cmake</code>安装不了最新版本的原因是操作系统本身的repositories没有更新，16.04是Ubuntu的长期支持（LTS）版本，要在5年内保持稳定，一般只会进行关键或者安全方面的更新，不会经常主动更新最新版本的packages，通常每6个月才会更新一次。</p><p><strong>推荐安装方法如下：</strong></p><ul><li>卸载Ubuntu提供的默认版本：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove --purge --auto-remove cmake</span><br></pre></td></tr></table></figure>或者<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge --auto-remove cmake</span><br></pre></td></tr></table></figure></li><li>去<a href="https://cmake.org/download/">CMake官网下载界面</a>，查看Cmake版本号，确定要安装的版本（修改version和build变量到需要的版本号，下例：3.19.1）：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">version=3.19</span><br><span class="line">build=1</span><br></pre></td></tr></table></figure></li><li>先新建一个文件夹temp来存放cmake源码包，然后获取cmake源码包：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/temp</span><br><span class="line">cd ~/temp</span><br><span class="line">wget https://cmake.org/files/v$version/cmake-$version.$build.tar.gz</span><br></pre></td></tr></table></figure></li><li>解压源码包:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf cmake-$version.$build.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入解压后的cmake目录:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd cmake-$version.$build/</span><br></pre></td></tr></table></figure></li><li><p>安装cmake：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bootstrap</span><br><span class="line">make -j$(nproc)</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong>: </p><ul><li>因为我的是多核CPU，这里使用了<code>make -j$(nproc)</code>命令进行并行编译，不过直接用<code>make</code>出问题的概率小一点，<code>nproc</code>资料可以看<a href="https://www.howtoforge.com/linux-nproc-command/">这里</a></li><li><code>make install</code>命令需要root privilege</li></ul></blockquote></li><li><p>最后，打开一个<strong>新终端</strong>，检查Cmake版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong>: </p><ul><li><code>cmake --version</code>要在新终端才有用，因为用上面的方法Cmake会默认安装在<code>/usr/local/bin/</code>，而如果用开始提到的<code>sudo apt-get install cmake</code>安装，默认安装路径会是<code>/usr/bin/</code>，原因可以看StackExchange上<a href="https://unix.stackexchange.com/questions/8656/usr-bin-vs-usr-local-bin-on-linux">这个回答</a>：<code>/usr/local/bin</code> is for normal user programs not managed by the distribution package manager, e.g. locally compiled packages. You should not install them into <code>/usr/bin</code> because future distribution upgrades may modify or delete them without warning.</li></ul></blockquote><p>  <code>cmake --version</code>运行的结果:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake version 3.19.1</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure></li></ul><h2 id="确认Cmake路径"><a href="#确认Cmake路径" class="headerlink" title="确认Cmake路径"></a>确认Cmake路径</h2><p>更新好Cmake版本后，为了确保Cmake在Matlab中可用，需要保证Cmake在Matlab的环境变量中：</p><ul><li>首先在Linux终端中查看Cmake路径，上面已经提过Cmake会默认安装在<code>/usr/local/bin/</code>，可以在终端查看：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which cmake</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/cmake</span><br></pre></td></tr></table></figure></li><li>然后打开<strong>Mtalab</strong>，命令行运行：<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!which cmake</span><br></pre></td></tr></table></figure>运行结果应该和前面Linux终端查到的路径一致：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/cmake</span><br></pre></td></tr></table></figure></li><li>最后也在Matlab查看一下Cmake版本：<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!cmake --version</span><br></pre></td></tr></table></figure>运行结果应和前面Linux终端查到版本号一致：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake version 3.19.1</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure></li></ul><h2 id="编译自定义message"><a href="#编译自定义message" class="headerlink" title="编译自定义message"></a>编译自定义message</h2><p>这里用Sawyer提供的ROS package<code>intera_core_msgs</code>举例，自定义的message文件就在<code>msg</code>里面。我先建了一个文件夹<code>custom_msgs</code>，然后在里面再建个文件夹<code>sawyer_custom_msg_matlab</code>包含这个package，以后有其他package也可以放到这个文件夹里面。<code>intera_core_msgs</code>package我是直接从<a href="https://github.com/RethinkRobotics/intera_common/tree/master/intera_core_msgs">Github</a>上复制进来的，里面已经生成且配置好<code>CmakeLists.txt</code>和<code>package.xml</code>文件了，如果你想自己create ROS package也可以，注意别忘了修改这两个文件。后面的<code>matlab_msg_gen_ros1</code>文件夹就是用Matlab编译生成的，下面会演示。</p><div align="center">  <img src="https://i.loli.net/2021/03/19/FzMK1Ti5OWZu2GU.png"></div><p><br></p><blockquote><p><strong>Note</strong></p><ul><li>因为只要用到msg，我复制<code>intera_core_msgs</code>package时没有复制<code>srv</code>，需要的时候再加进去。</li><li>目前不支持ROS actions，在自定义message生成期间将被忽略。</li></ul></blockquote><p>接下来就可以在Matlab里面用<a href="https://www.mathworks.com/help/ros/ref/rosgenmsg.html"><code>rosgenmsg</code></a>命令编译了：</p><ul><li>声明自定义message所在ROS package的路径：<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sawyer_folder = <span class="string">&#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab&#x27;</span></span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sawyer_folder =</span><br><span class="line"></span><br><span class="line">    &#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab&#x27;</span><br></pre></td></tr></table></figure></li><li>Call rosgenmsg:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosgenmsg(sawyer_folder)</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Identifying message files in folder &#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab&#x27;..Done.</span><br><span class="line">Validating message files in folder &#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab&#x27;..Done.</span><br><span class="line">[1/1] Generating MATLAB interfaces for custom message packages... Done.</span><br><span class="line">Running catkin build in folder &#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab/matlab_msg_gen_ros1/glnxa64&#x27;.</span><br><span class="line">Build in progress. This may take several minutes...</span><br><span class="line">Build succeeded.build log</span><br><span class="line"> </span><br><span class="line">To use the custom messages, follow these steps:</span><br><span class="line"> </span><br><span class="line">1. Add the custom message folder to the MATLAB path by executing:</span><br><span class="line"> </span><br><span class="line">addpath(&#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab/matlab_msg_gen_ros1/glnxa64/install/m&#x27;)</span><br><span class="line">savepath</span><br><span class="line"> </span><br><span class="line">2. Refresh all message class definitions, which requires clearing the workspace, by executing:</span><br><span class="line"> </span><br><span class="line">clear classes</span><br><span class="line">rehash toolboxcache</span><br><span class="line"> </span><br><span class="line">3. Verify that you can use the custom messages. </span><br><span class="line">   Enter &quot;rosmsg list&quot; and ensure that the output contains the generated</span><br><span class="line">   custom message types.</span><br></pre></td></tr></table></figure></li><li>然后按照上面的提示说明加入环境变量，清理一下工作空间就可以了，逐条运行：<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addpath(<span class="string">&#x27;/home/siqin/Documents/MATLAB/custom_msgs/sawyer_custom_msg_matlab/matlab_msg_gen_ros1/glnxa64/install/m&#x27;</span>)</span><br><span class="line">savepath</span><br><span class="line">clear classes</span><br><span class="line">rehash toolboxcache</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong><br>执行<code>savepath</code>时如果提示无法修改Matlab路径文件的话，有两种解决方法：</p><ul><li>第一种：在当前Matlab命令窗口修改权限：<br>查看pathdef路径:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which pathdef</span><br></pre></td></tr></table></figure>运行结果：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/MATLAB/R2021a/toolbox/local/pathdef.m</span><br></pre></td></tr></table></figure>修改成所有user都有读和写的权限：<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">666</span> /usr/local/MATLAB/R2018a/toolbox/local/pathdef.m</span><br></pre></td></tr></table></figure></li><li>第二种：在Linux终端用<code>sudo matlab</code>重新打开Matlab</li></ul></blockquote></li></ul><p>最后用查看自定义的message types是否被成功生成：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg list</span><br></pre></td></tr></table></figure><br>可以发现<code>intera_core_msgs</code>package下<code>msg</code>文件夹里面的所有自定义message都已被成功生成：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">intera_core_msgs/AnalogIOState                                 </span><br><span class="line">intera_core_msgs/AnalogIOStates                                </span><br><span class="line">intera_core_msgs/AnalogOutputCommand                           </span><br><span class="line">intera_core_msgs/CameraControl                                 </span><br><span class="line">intera_core_msgs/CameraSettings                                </span><br><span class="line">intera_core_msgs/CollisionAvoidanceState                       </span><br><span class="line">intera_core_msgs/CollisionDetectionState                       </span><br><span class="line">intera_core_msgs/DigitalIOState                                </span><br><span class="line">intera_core_msgs/DigitalIOStates                               </span><br><span class="line">intera_core_msgs/DigitalOutputCommand                          </span><br><span class="line">intera_core_msgs/EndpointNamesArray                            </span><br><span class="line">intera_core_msgs/EndpointState                                 </span><br><span class="line">intera_core_msgs/EndpointStates                                </span><br><span class="line">intera_core_msgs/HeadPanCommand                                </span><br><span class="line">intera_core_msgs/HeadState                                     </span><br><span class="line">intera_core_msgs/HomingCommand                                 </span><br><span class="line">intera_core_msgs/HomingState                                   </span><br><span class="line">intera_core_msgs/IOComponentCommand                            </span><br><span class="line">intera_core_msgs/IOComponentConfiguration                      </span><br><span class="line">intera_core_msgs/IOComponentStatus                             </span><br><span class="line">intera_core_msgs/IODataStatus                                  </span><br><span class="line">intera_core_msgs/IODeviceConfiguration                         </span><br><span class="line">intera_core_msgs/IODeviceStatus                                </span><br><span class="line">intera_core_msgs/IONodeConfiguration                           </span><br><span class="line">intera_core_msgs/IONodeStatus                                  </span><br><span class="line">intera_core_msgs/IOStatus                                      </span><br><span class="line">intera_core_msgs/InteractionControlCommand                     </span><br><span class="line">intera_core_msgs/InteractionControlState                       </span><br><span class="line">intera_core_msgs/JointCommand                                  </span><br><span class="line">intera_core_msgs/JointLimits                                   </span><br><span class="line">intera_core_msgs/NavigatorState                                </span><br><span class="line">intera_core_msgs/NavigatorStates                               </span><br><span class="line">intera_core_msgs/RobotAssemblyState                            </span><br><span class="line">intera_core_msgs/SEAJointState                                 </span><br><span class="line">intera_core_msgs/URDFConfiguration  </span><br></pre></td></tr></table></figure></p><h2 id="rosbag数据处理"><a href="#rosbag数据处理" class="headerlink" title="rosbag数据处理"></a>rosbag数据处理</h2><p>接下来以<code>intera_core_msgs/EndpointState</code>这个自定义message为例，用Matlab处理<code>rosbag</code>记录的机器人数据。</p><ul><li><strong>bag文件读取</strong>:  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bag = rosbag(<span class="string">&#x27;/home/siqin/catkin_ws/sawyer_end_point_state.bag&#x27;</span>);</span><br></pre></td></tr></table></figure>  运行后点击Workspace的bag变量，得到如下图所示信息：  <div align="center">  <img src="https://i.loli.net/2021/03/19/EzVb4ont9sLUau3.png">  </div></li></ul><p><br></p><ul><li><p><strong>选择Topic</strong><br>  点击上图中的AvaliableTopics查看记录有哪些Topic，我这里只记录了一个<code>/robot/limb/right/endpoint_state</code>，如下图所示：</p>  <div align="center">  <img src="https://i.loli.net/2021/03/19/VIhJt6PTBy3pNGu.png">  </div><p>  查看topic之后利用<code>select</code>函数选择需要处理的Topic名称:</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state_select = select(bag, <span class="string">&#x27;Time&#x27;</span>,[bag.StartTime bag.EndTime], <span class="string">&#x27;Topic&#x27;</span>, <span class="string">&#x27;/robot/limb/right/endpoint_state&#x27;</span>);</span><br></pre></td></tr></table></figure><p>  从上图还可以注意到MessageType列中的<code>intera_core_msgs/EndpointState</code>正是我们之前自定义的message。</p><p>  <br></p></li><li><p><strong>利用<code>readMessages</code>函数读取select函数选择的数据</strong></p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stateMsgs = readMessages(state_select);</span><br></pre></td></tr></table></figure><p>  运行后点击Workspace的stateMsgs变量，得到如下图所示信息：</p>  <div align="center">  <img src="https://i.loli.net/2021/03/19/IQ4mFVNbCzwe7Ec.png">  </div><p>  <br></p><p>  可以看到stateMsgs是一个1408x1的array，包含了记录的1408条message数据，点击第一条看看：</p>  <div align="center">  <img src="https://i.loli.net/2021/03/19/ksNwmJIxejdYK1M.png">  </div><p>  上图显示的是定义<code>intera_core_msgs/EndpointState</code>的数据结构，我们可以先在Linux终端看一下具体内容：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg show intera_core_msgs/EndpointState</span><br></pre></td></tr></table></figure><p>  运行结果：</p>  <div align="center">  <img src="https://i.loli.net/2021/03/19/HVjASKOoIXfeGu7.png">  </div><p>  <br></p><p>  可以看到<code>intera_core_msgs/EndpointState</code>使用了<a href="https://wiki.ros.org/std_msgs"><code>std_msgs</code></a>和<a href="https://wiki.ros.org/geometry_msgs"><code>geometry_msgs</code></a>两种ROS自带的message来定义，主要包含了机器人TCP的以下信息：</p><blockquote><p><strong>pose（位姿）：</strong></p><ul><li>positon 位置： x y z坐标</li><li>orinentation 姿态： 用四元数表示  </li></ul><p><strong>twist（旋量，6维向量）：</strong></p><ul><li>linear： 沿轴的线速度，3维向量</li><li>angular： 绕轴的角速度 3维向量</li></ul><p><strong>wrench（旋量，6维向量）：</strong> </p><ul><li>force： 力，3维向量</li><li>torque： 力矩，3维向量</li></ul><p><strong>Note：</strong> 四元数和旋量理论后面有空单独写几篇讨论</p></blockquote><p>  以pose中的position为例：点击上图stateMsgs中的1x1 Pose，得到如下图所示信息：</p>  <div align="center">  <img src="https://i.loli.net/2021/03/20/2fp6LK8x91ejvQS.png">  </div><p>  可以看到Pose包含了positon和orinentation信息，点开positon：</p>  <div align="center">  <img src="https://i.loli.net/2021/03/20/yqz1XCEvHu8SYAo.png">  </div><p>  positon包含了机器人TCP的x y z坐标，与在终端查看的结果一致，点开X的信息：</p>  <div align="center">  <img src="https://i.loli.net/2021/03/20/lP6jR7zKhexfXWT.png">  </div><p>  <br></p><blockquote><p><strong>Note：</strong><br>  图中每个tab的名称代表的是当前数据的读取方式，比如stateMsg{1,1}.Pose.Position.X表示的是X的读取方式。</p></blockquote><p>  接下来可视化数据，建立一个三维数组，将所有position数据读入数组：</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TCP_position=<span class="built_in">zeros</span>(<span class="number">1408</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">1408</span></span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">1</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.X;</span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">2</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.Y;</span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">3</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.Z;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>  绘制轨迹图：</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">3</span></span><br><span class="line">    <span class="built_in">plot</span>((<span class="number">1</span>:<span class="number">1408</span>),TCP_position(:,<span class="built_in">i</span>),<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">xlabel(<span class="string">&#x27;seq&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Position of End Point&#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;Position.X&#x27;</span>,<span class="string">&#x27;Position.Y&#x27;</span>,<span class="string">&#x27;Position.Z&#x27;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">comet3(position(:,<span class="number">1</span>),position(:,<span class="number">2</span>),position(:,<span class="number">3</span>),<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>  <table>  <tr>      <td ><img src="https://i.loli.net/2021/03/20/w9gryYWqEd35F6p.png"></td>      <td ><img src="https://i.loli.net/2021/03/20/uZ7fEtqQAjykDcS.gif"></td>  </tr>  </table><p>  完整Matlab代码：</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">clear all;</span><br><span class="line">close all;</span><br><span class="line">clc;</span><br><span class="line"></span><br><span class="line">bag = rosbag(<span class="string">&#x27;/home/siqin/catkin_ws/sawyer_end_point_state.bag&#x27;</span>);</span><br><span class="line"></span><br><span class="line">state_select = select(bag, <span class="string">&#x27;Time&#x27;</span>,[bag.StartTime bag.EndTime], <span class="string">&#x27;Topic&#x27;</span>, <span class="string">&#x27;/robot/limb/right/endpoint_state&#x27;</span>);<span class="comment">% &#123;&#x27;intera_core_msgs/EndpointState&#x27;&#125;</span></span><br><span class="line">stateMsgs = readMessages(state_select);</span><br><span class="line"></span><br><span class="line"><span class="comment">% rosmsg show intera_core_msgs/EndpointState</span></span><br><span class="line"><span class="comment">% std_msgs/Header header</span></span><br><span class="line"><span class="comment">%   uint32 seq</span></span><br><span class="line"><span class="comment">%   time stamp</span></span><br><span class="line"><span class="comment">%   string frame_id</span></span><br><span class="line"><span class="comment">% geometry_msgs/Pose pose</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Point position</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Quaternion orientation</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">%     float64 w</span></span><br><span class="line"><span class="comment">% geometry_msgs/Twist twist</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Vector3 linear</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Vector3 angular</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">% geometry_msgs/Wrench wrench</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Vector3 force</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">%   geometry_msgs/Vector3 torque</span></span><br><span class="line"><span class="comment">%     float64 x</span></span><br><span class="line"><span class="comment">%     float64 y</span></span><br><span class="line"><span class="comment">%     float64 z</span></span><br><span class="line"><span class="comment">% bool valid</span></span><br><span class="line"></span><br><span class="line">TCP_position=<span class="built_in">zeros</span>(<span class="number">1408</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">1408</span></span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">1</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.X;</span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">2</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.Y;</span><br><span class="line">    TCP_position(<span class="built_in">i</span>,<span class="number">3</span>)=stateMsgs&#123;<span class="built_in">i</span>,<span class="number">1</span>&#125;.Pose.Position.Z;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">3</span></span><br><span class="line">    <span class="built_in">plot</span>((<span class="number">1</span>:<span class="number">1408</span>),TCP_position(:,<span class="built_in">i</span>),<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">xlabel(<span class="string">&#x27;seq&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Position of End Point&#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;Position.X&#x27;</span>,<span class="string">&#x27;Position.Y&#x27;</span>,<span class="string">&#x27;Position.Z&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">comet3(TCP_position(:,<span class="number">1</span>),TCP_position(:,<span class="number">2</span>),TCP_position(:,<span class="number">3</span>),<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://www.mathworks.com/help/ros/ug/ros-custom-message-support.html">https://www.mathworks.com/help/ros/ug/ros-custom-message-support.html</a><br>[2] <a href="https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line">https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line</a><br>[3] <a href="https://www.mathworks.com/matlabcentral/answers/623103-matlab-2020b-rosgenmsg-can-t-find-cmake">https://www.mathworks.com/matlabcentral/answers/623103-matlab-2020b-rosgenmsg-can-t-find-cmake</a><br>[4] <a href="https://blog.csdn.net/yaked/article/details/97682872">https://blog.csdn.net/yaked/article/details/97682872</a><br>[5] <a href="https://blog.csdn.net/weixin_40712763/article/details/78909608">https://blog.csdn.net/weixin_40712763/article/details/78909608</a><br>[6] <a href="https://blog.csdn.net/u012424737/article/details/106766307">https://blog.csdn.net/u012424737/article/details/106766307</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我最近在用Sawyer机器人做实验，用&lt;code&gt;rosbag&lt;/code&gt;记录了机器人状态数据，后续要进行可视化和分析，虽然ROS内置&lt;code&gt;rqt_plot&lt;/code&gt;有绘图功能，但是&lt;code&gt;rqt_plot&lt;/code&gt;的功能比较简单，数据量大的时候查看起来</summary>
      
    
    
    
    <category term="Tutorial" scheme="https://siqindong.com/categories/Tutorial/"/>
    
    
    <category term="ROS" scheme="https://siqindong.com/tags/ROS/"/>
    
    <category term="Matlab" scheme="https://siqindong.com/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>Kalman Filter</title>
    <link href="https://siqindong.com/2020/12/16/Kalman-Filter/"/>
    <id>https://siqindong.com/2020/12/16/Kalman-Filter/</id>
    <published>2020-12-17T01:28:37.000Z</published>
    <updated>2022-02-01T20:21:57.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot; &quot;&gt;&lt;/a&gt; &lt;/h2&gt;</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://siqindong.com/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Gaussian Processes</title>
    <link href="https://siqindong.com/2020/11/14/Gaussian-Processes/"/>
    <id>https://siqindong.com/2020/11/14/Gaussian-Processes/</id>
    <published>2020-11-14T05:11:14.000Z</published>
    <updated>2022-02-07T20:45:39.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In supervised learning, we often use parametric models $p(\mathbf{y} \lvert \mathbf{X},\boldsymbol\theta)$ to explain data and infer optimal values of parameter $\boldsymbol\theta$ via <a href="https://en.wikipedia.org/wiki/Maximum_likelihood_estimation">maximum likelihood</a> or <a href="https://de.wikipedia.org/wiki/Maximum_a_posteriori">maximum a posteriori</a> estimation. If needed we can also infer a full <a href="https://en.wikipedia.org/wiki/Posterior_probability">posterior distribution</a> $p(\boldsymbol\theta \lvert \mathbf{X},\mathbf{y})$ instead of a point estimate $\boldsymbol{\hat\theta}$. With increasing data complexity, models with a higher number of parameters are usually needed to explain data reasonably well. Methods that use models with a fixed number of parameters are called parametric methods. </p><p>In non-parametric methods, on the other hand, the number of parameters depend on the dataset size. For example, in <a href="https://en.wikipedia.org/wiki/Kernel_regression">Nadaraya-Watson kernel regression</a>, a weight $w_i$ is assigned to each observed target $y_i$ and for predicting the target value at a new point $\mathbf{x}$ a weighted average is computed: </p><script type="math/tex; mode=display">\begin{align*}f(\mathbf{x}) &= \sum_{i=1}^{N}w_i(\mathbf{x})y_i \\w_i(\mathbf{x}) &= \frac{\kappa(\mathbf{x}, \mathbf{x}_{i})}{\sum_{i'=1}^{N}\kappa(\mathbf{x}, \mathbf{x}_{i'})}\end{align*}</script><p>Observations that are closer to $\mathbf{x}$ have a higher weight than observations that are further away. Weights are computed from $\mathbf{x}$ and observed $\mathbf{x}_i$ with a kernel $\kappa$. A special case is k-nearest neighbors (KNN) where the $k$ closest observations have a weight $1/k$, and all others have weight $0$. Non-parametric methods often need to process all training data for prediction and are therefore slower at inference time than parametric methods. On the other hand, training is usually faster as non-parametric models only need to remember training data. </p><p>Another example of non-parametric methods are <a href="https://en.wikipedia.org/wiki/Gaussian_process">Gaussian processes</a> (GPs). Instead of inferring a distribution over the parameters of a parametric function Gaussian processes can be used to infer a distribution over functions directly. A Gaussian process defines a prior over functions. After having observed some function values it can be converted into a posterior over functions. Inference of continuous function values in this context is known as GP regression but GPs can also be used for classification. </p><h2 id="Univariate-Gaussian-distribution"><a href="#Univariate-Gaussian-distribution" class="headerlink" title="Univariate Gaussian distribution"></a>Univariate Gaussian distribution</h2><p>The probability density function of a univariate Gaussian distribution:</p><script type="math/tex; mode=display">\begin{align*}p(\mathbf{x}) = \frac{1}{\sigma\sqrt{2\pi}}\exp (-\frac{(\mathbf{x}-\boldsymbol{\mu})^2}{2\sigma^2}) \tag{1}\label{eq1}\end{align*}</script><p>$\boldsymbol{\mu}$ is the mean or expectation of the distribution (and also its median and mode), while the parameter $\sigma$ is its standard deviation.The variance of the distribution is $\sigma^2$.</p><h2 id="Multivariate-Gaussian-distribution"><a href="#Multivariate-Gaussian-distribution" class="headerlink" title="Multivariate Gaussian distribution"></a>Multivariate Gaussian distribution</h2><p>The multivariate Gaussian distribution is a generalization of the univariate Gaussian distribution to higher dimensions. Assuming that the dimensions are independent of each other:</p><script type="math/tex; mode=display">\begin{align*}p(\mathbf{x}_{1}, \mathbf{x}_{2}, ..., \mathbf{x}_{N}) &= \prod_{i=1}^{N}p(\mathbf{x}_{i}) \\&= \frac{1}{(2\pi)^{\frac{N}{2}}\sigma_1\sigma_2...\sigma_N}\exp \left(-\frac{1}{2}\left [\frac{(\mathbf{x}_{1}-\boldsymbol{\mu}_{1})^2}{\sigma_1^2} + \frac{(\mathbf{x}_{2}-\boldsymbol{\mu}_{2})^2}{\sigma_2^2} + ... + \frac{(\mathbf{x}_{N}-\boldsymbol{\mu}_{N})^2}{\sigma_N^2}\right]\right) \tag{2}\label{eq2}\end{align*}</script><p>Equation $(2)$ in matrix form:</p><script type="math/tex; mode=display">\begin{align*}\mathbf{x}-\boldsymbol{\mu} &= [\mathbf{x}_{1}-\boldsymbol{\mu}_{1}, \mathbf{x}_{2}-\boldsymbol{\mu}_{2}, ..., \mathbf{x}_{N}-\boldsymbol{\mu}_{N}]^T \\\mathbf{K} &= \begin{bmatrix}\sigma_1^2 & 0 & \cdots & 0\\0 & \sigma_2^2 & \cdots & 0\\\vdots & \vdots & \ddots & 0\\0 & 0 & 0 & \sigma_N^2\end{bmatrix}\end{align*}</script><p>We have</p><script type="math/tex; mode=display">\begin{align*}|\mathbf{K}|^{\frac{1}{2}} &= \sigma_1\sigma_2...\sigma_N \\(\mathbf{x}-\boldsymbol{\mu})^T\mathbf{K}^{-1}(\mathbf{x}-\boldsymbol{\mu}) &= \frac{(\mathbf{x}_{1}-\boldsymbol{\mu}_{1})^2}{\sigma_1^2} + \frac{(\mathbf{x}_{2}-\boldsymbol{\mu}_{2})^2}{\sigma_2^2} + ... + \frac{(\mathbf{x}_{N}-\boldsymbol{\mu}_{N})^2}{\sigma_N^2}\end{align*}</script><p>Thus</p><script type="math/tex; mode=display">\begin{align*}p(\mathbf{x}) = (2\pi)^{-\frac{N}{2}}|\mathbf{K}|^{-\frac{1}{2}}\exp \left( -\frac{1}{2}(\mathbf{x}-\boldsymbol{\mu})^T\mathbf{K}^{-1}(\mathbf{x}-\boldsymbol{\mu}) \right) \tag{3}\label{eq3}\end{align*}</script><p>$\boldsymbol{\mu} \in \mathbb{R}^N$ is the mean vector, $\mathbf{K} \in \mathbb{R}^{N \times N}$ is the covariance matrix, since we assume that the dimensions are independent of each other, $\mathbf{K}$ is a diagonal matrix. When the variables are correlated, the form of Equation $(3)$ is still the same, the covariance matrix $\mathbf{K}$ is no longer a diagonal matrix and only has the properties of positive semi-definite and symmetric.</p><p>Equation $(3)$ is usually abbreviated as:</p><script type="math/tex; mode=display">\begin{align*}\mathbf{x} \sim \mathcal{N}(\boldsymbol{\mu}, \mathbf{K})\end{align*}</script><h2 id="Gaussian-Processes"><a href="#Gaussian-Processes" class="headerlink" title="Gaussian Processes"></a>Gaussian Processes</h2><p>A Gaussian process is a <a href="https://en.wikipedia.org/wiki/Stochastic_process">random process</a> where any point $\mathbf{x} = [\mathbf{x}_{1}, \mathbf{x}_{2}, \cdots, \mathbf{x}_{N}]$ is assigned a random variable $f(\mathbf{x}) = [f(\mathbf{x}_{1}), f(\mathbf{x}_{2}), \cdots, f(\mathbf{x}_{N})]$ and where the joint distribution of a finite number of these variables $p(f(\mathbf{x}_1),…,f(\mathbf{x}_N))$ is itself Gaussian:</p><script type="math/tex; mode=display">p(\mathbf{f} \lvert \mathbf{X}) = \mathcal{N}(\mathbf{f} \lvert \boldsymbol\mu, \mathbf{K})\tag{4}\label{eq4}</script><p>In Equation $(4)$, <script type="math/tex">\mathbf{f} = (f(\mathbf{x}_1),...,f(\mathbf{x}_N))</script>, <script type="math/tex">\boldsymbol\mu = (m(\mathbf{x}_1),...,m(\mathbf{x}_N))</script> and <script type="math/tex">K_{ij} = \kappa(\mathbf{x}_i,\mathbf{x}_j)</script>. $m$ is the mean function and it is common to use $m(\mathbf{x}) = 0$ as GPs are flexible enough to model the mean arbitrarily well. $\kappa$ is a positive definite <em>kernel function</em> or <em>covariance function</em>. Thus, a Gaussian process is a distribution over functions whose shape (smoothness, …) is defined by $\mathbf{K}$. If points $\mathbf{x}_i$ and $\mathbf{x}_j$ are considered to be similar by the kernel the function values at these points, $f(\mathbf{x}_i)$ and $f(\mathbf{x}_j)$, can be expected to be similar too. </p><p>A GP prior $p(\mathbf{f} \lvert \mathbf{X})$ can be converted into a GP posterior $p(\mathbf{f} \lvert \mathbf{X},\mathbf{y})$ after having observed some data $\mathbf{y}$. The posterior can then be used to make predictions <script type="math/tex">\mathbf{f}_*</script> given new input <script type="math/tex">\mathbf{X}_*</script>:</p><script type="math/tex; mode=display">\begin{align*}p(\mathbf{f}_* \lvert \mathbf{X}_*,\mathbf{X},\mathbf{y}) &= \int{p(\mathbf{f}_* \lvert \mathbf{X}_*,\mathbf{f})p(\mathbf{f} \lvert \mathbf{X},\mathbf{y})}\ d\mathbf{f} \\ &= \mathcal{N}(\mathbf{f}_* \lvert \boldsymbol{\mu}_*, \boldsymbol{\Sigma}_*)\tag{5}\label{eq5}\end{align*}</script><p>Equation $(5)$ is the posterior predictive distribution which is also a Gaussian with mean <script type="math/tex">\boldsymbol{\mu}_*</script> and <script type="math/tex">\boldsymbol{\Sigma}_*</script>. By definition of the GP, the joint distribution of observed data $\mathbf{y}$ and predictions <script type="math/tex">\mathbf{f}_*</script>  is</p><script type="math/tex; mode=display">\begin{bmatrix}\mathbf{y} \\ \mathbf{f}_*\end{bmatrix} \sim \mathcal{N}\left(\boldsymbol{0},\begin{bmatrix}\mathbf{K}_y & \mathbf{K}_* \\ \mathbf{K}_*^T & \mathbf{K}_{**}\end{bmatrix}\right)\tag{6}\label{eq6}</script><p>With $N$ training data and <script type="math/tex">N_*</script> new input data, <script type="math/tex">\mathbf{K}_y = \kappa(\mathbf{X},\mathbf{X}) + \sigma_y^2\mathbf{I} = \mathbf{K} + \sigma_y^2\mathbf{I}</script> is <script type="math/tex">N \times N</script>, <script type="math/tex">\mathbf{K}_* = \kappa(\mathbf{X},\mathbf{X}_*)</script> is <script type="math/tex">N \times N_*</script> and <script type="math/tex">\mathbf{K}_{**} = \kappa(\mathbf{X}_*,\mathbf{X}_*)</script> is <script type="math/tex">N_* \times N_*</script>. $\sigma_y^2$ is the noise term in the diagonal of $\mathbf{K_y}$. It is set to zero if training targets are noise-free and to a value greater than zero if observations are noisy. The mean is set to $\boldsymbol{0}$ for notational simplicity. The sufficient statistics of the posterior predictive distribution, <script type="math/tex">\boldsymbol{\mu}_*</script> and <script type="math/tex">\boldsymbol{\Sigma}_*</script>, can be computed with<sup>[1][3]</sup></p><script type="math/tex; mode=display">\begin{align*}\boldsymbol{\mu_*} &= \mathbf{K}_*^T \mathbf{K}_y^{-1} \mathbf{y}\tag{7}\label{eq7} \\\boldsymbol{\Sigma_*} &= \mathbf{K}_{**} - \mathbf{K}_*^T \mathbf{K}_y^{-1} \mathbf{K}_*\tag{8}\label{eq8}\end{align*}</script><p>This is the minimum we need to know for implementing Gaussian processes and applying them to regression problems. For further details, please consult the literature in the <a href="#References">References</a> section. The next section shows how to implement GPs with plain NumPy from scratch, later sections demonstrate how to use GP implementations from <a href="http://scikit-learn.org/stable/">scikit-learn</a>.</p><h2 id="Implementation-with-NumPy"><a href="#Implementation-with-NumPy" class="headerlink" title="Implementation with NumPy"></a>Implementation with NumPy</h2><p>Here, we will use the squared exponential kernel, also known as Gaussian kernel or RBF kernel:</p><script type="math/tex; mode=display">\kappa(\mathbf{x}_i,\mathbf{x}_j) = \sigma_f^2 \exp(-\frac{1}{2l^2}  (\mathbf{x}_i - \mathbf{x}_j)^T  (\mathbf{x}_i - \mathbf{x}_j))\tag{9}</script><p>The length parameter $l$ controls the smoothness of the function and $\sigma_f$ the vertical variation. For simplicity, we use the same length parameter $l$ for all input dimensions (isotropic kernel). </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kernel</span>(<span class="params">X1, X2, l=<span class="number">1.0</span>, sigma_f=<span class="number">1.0</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Isotropic squared exponential kernel. Computes </span></span><br><span class="line"><span class="string">    a covariance matrix from points in X1 and X2.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X1: Array of m points (m x d).</span></span><br><span class="line"><span class="string">        X2: Array of n points (n x d).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Covariance matrix (m x n).</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    sqdist = np.<span class="built_in">sum</span>(X1**<span class="number">2</span>, <span class="number">1</span>).reshape(-<span class="number">1</span>, <span class="number">1</span>) + np.<span class="built_in">sum</span>(X2**<span class="number">2</span>, <span class="number">1</span>) - <span class="number">2</span> * np.dot(X1, X2.T)</span><br><span class="line">    <span class="keyword">return</span> sigma_f**<span class="number">2</span> * np.exp(-<span class="number">0.5</span> / l**<span class="number">2</span> * sqdist)</span><br></pre></td></tr></table></figure><p>There are many other kernels that can be used for Gaussian processes. See [3] for a detailed reference or the scikit-learn documentation for <a href="http://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels">some examples</a>.</p><h3 id="Prior"><a href="#Prior" class="headerlink" title="Prior"></a>Prior</h3><p>Let’s first define a prior over functions with mean zero and a covariance matrix computed with kernel parameters $l=1$ and $\sigma_f=1$. To draw random functions from that GP we draw random samples from the corresponding multivariate normal. The following example draws ten random samples and plots it together with the zero mean and the 95% confidence interval (computed from the diagonal of the covariance matrix).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Finite number of points</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># points we&#x27;re going to make predictions at</span></span><br><span class="line">X = np.linspace(-<span class="number">5</span>, <span class="number">5</span>, n).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mean and covariance of the prior</span></span><br><span class="line">mu_prior = np.zeros(X.shape)</span><br><span class="line">cov_prior = kernel(X, X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw 10 samples from the prior</span></span><br><span class="line">number_of_samples = <span class="number">10</span></span><br><span class="line">samples_prior = np.random.multivariate_normal(mu_prior.ravel(), cov_prior, number_of_samples)</span><br><span class="line">plot_gp(mu_prior, cov_prior, X, samples=samples_prior)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;number_of_samples&#125;</span> samples from the GP prior (n = 100)&#x27;</span>)</span><br><span class="line">plt.axis([-<span class="number">5</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/1PCjDxdQRe5Z8AY.png"></div><p><br></p><p>The <code>plot_gp</code> function is defined here.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gp</span>(<span class="params">mu, cov, X, X_train=<span class="literal">None</span>, Y_train=<span class="literal">None</span>, samples=[]</span>):</span></span><br><span class="line">    plot_margin_of_error(X, mu, cov)</span><br><span class="line">    plt.plot(X, mu, label=<span class="string">&#x27;GP mean&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i, sample <span class="keyword">in</span> <span class="built_in">enumerate</span>(samples):</span><br><span class="line">        plt.plot(X, sample, lw=<span class="number">1</span>, ls=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> X_train <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        plt.plot(X_train, Y_train, <span class="string">&#x27;rx&#x27;</span>, label=<span class="string">&#x27;Observed Data&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br></p><p>The <code>plot_margin_of_error</code> function is defined here.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_margin_of_error</span>(<span class="params">X, mu, cov</span>):</span></span><br><span class="line">    X = X.ravel()</span><br><span class="line">    mu = mu.ravel()</span><br><span class="line">    uncertainty = <span class="number">1.96</span> * np.sqrt(np.diag(cov))  <span class="comment"># %95 Confidence interval</span></span><br><span class="line">    plt.fill_between(X, mu + uncertainty, mu - uncertainty, alpha=<span class="number">0.1</span>,</span><br><span class="line">                     label=<span class="string">&#x27;Margin of error (%95 Confidence interval)&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Prediction-from-noise-free-training-data"><a href="#Prediction-from-noise-free-training-data" class="headerlink" title="Prediction from noise-free training data"></a>Prediction from noise-free training data</h3><p>To compute the sufficient statistics i.e. mean and covariance of the posterior predictive distribution we implement Equations $(7)$ and $(8)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> inv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">posterior_predictive</span>(<span class="params">X_s, X_train, Y_train, l=<span class="number">1.0</span>, sigma_f=<span class="number">1.0</span>, sigma_y=<span class="number">1e-8</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Computes the sufficient statistics of the GP posterior predictive distribution</span></span><br><span class="line"><span class="string">    from m training data X_train and Y_train and n new inputs X_s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_s: New input locations (n x d).</span></span><br><span class="line"><span class="string">        X_train: Training locations (m x d).</span></span><br><span class="line"><span class="string">        Y_train: Training targets (m x 1).</span></span><br><span class="line"><span class="string">        l: Kernel length parameter.</span></span><br><span class="line"><span class="string">        sigma_f: Kernel vertical variation parameter.</span></span><br><span class="line"><span class="string">        sigma_y: Noise parameter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Posterior mean vector (n x d) and covariance matrix (n x n).</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    K = kernel(X_train, X_train, l, sigma_f) + sigma_y ** <span class="number">2</span> * np.eye(<span class="built_in">len</span>(X_train))</span><br><span class="line">    K_s = kernel(X_train, X_s, l, sigma_f)</span><br><span class="line">    K_ss = kernel(X_s, X_s, l, sigma_f) + <span class="number">1e-8</span> * np.eye(<span class="built_in">len</span>(X_s))</span><br><span class="line">    K_inv = inv(K)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Equation (7)</span></span><br><span class="line">    mu_s = K_s.T.dot(K_inv).dot(Y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Equation (8)</span></span><br><span class="line">    cov_s = K_ss - K_s.T.dot(K_inv).dot(K_s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mu_s, cov_s</span><br></pre></td></tr></table></figure><p>and apply them to noise-free training data <code>X_train</code> and <code>Y_train</code>. The following example draws ten samples from the posterior predictive and plots them along with the mean, confidence interval and training data. In a noise-free model, variance at the training points is zero and all random functions drawn from the posterior go through the trainig points. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Noise free training data</span></span><br><span class="line">X_train = np.array([-<span class="number">3</span>, -<span class="number">2</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">Y_train_noise_free = np.sin(X_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute mean and covariance of the posterior predictive distribution</span></span><br><span class="line">mu_s, cov_s = posterior_predictive(X, X_train, Y_train_noise_free)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw 10 samples from the posterior</span></span><br><span class="line">samples_posterior = np.random.multivariate_normal(mu_s.ravel(), cov_s, number_of_samples)</span><br><span class="line"></span><br><span class="line">plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train_noise_free, samples=samples_posterior)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;number_of_samples&#125;</span> samples from the GP posterior (n = 100)&#x27;</span>)</span><br><span class="line">plt.axis([-<span class="number">5</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/apMiwYxU1S5bPTy.png"></div><p><br></p><p>Comparison of true function and GP posterior.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f_true = np.sin(X).flatten()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Gp mean</span></span><br><span class="line">plt.plot(X, mu_s, ls=<span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;GP mean&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot data observed</span></span><br><span class="line">plt.plot(X_train, Y_train_noise_free, <span class="string">&#x27;rx&#x27;</span>, label=<span class="string">&#x27;Observed Data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot True function</span></span><br><span class="line">plt.plot(X, f_true, label=<span class="string">&#x27;True function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Margin of error (%95 Confidence interval)</span></span><br><span class="line">plot_margin_of_error(X, mu_s, cov_s)</span><br><span class="line">plt.axis([-<span class="number">5</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><table>    <tr>        <td ><img src="https://i.loli.net/2020/10/11/apMiwYxU1S5bPTy.png"></td>        <td ><img src="https://i.loli.net/2020/10/11/snN5p8c4a213AtR.png"></td>    </tr></table><h3 id="Prediction-from-noisy-training-data"><a href="#Prediction-from-noisy-training-data" class="headerlink" title="Prediction from noisy training data"></a>Prediction from noisy training data</h3><p>If some noise is included in the model, training points are only approximated and the variance at the training points is non-zero.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Noisy training data</span></span><br><span class="line">noise = <span class="number">0.4</span></span><br><span class="line">X_train = np.array([-<span class="number">3</span>, -<span class="number">2</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">Y_train_noisy = np.sin(X_train) + noise * np.random.randn(*X_train.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute mean and covariance of the posterior predictive distribution</span></span><br><span class="line">mu_s, cov_s = posterior_predictive(X, X_train, Y_train_noisy, sigma_y=noise)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw 10 samples from the posterior</span></span><br><span class="line">samples_posterior_noisy = np.random.multivariate_normal(mu_s.ravel(), cov_s, number_of_samples)</span><br><span class="line">plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train_noisy, samples=samples_posterior_noisy)</span><br><span class="line">plt.title(<span class="string">f&#x27;<span class="subst">&#123;number_of_samples&#125;</span> samples from the GP posterior (n = 100)&#x27;</span>)</span><br><span class="line">plt.axis([-<span class="number">5</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/JTyoUWwkn8vgDKH.png"></div><p><br></p><p>Comparison of true function and GP posterior.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f_true = np.sin(X).flatten()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Gp mean</span></span><br><span class="line">plt.plot(X, mu_s, ls=<span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;GP mean&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot data observed</span></span><br><span class="line">plt.plot(X_train, Y_train_noisy, <span class="string">&#x27;rx&#x27;</span>, label=<span class="string">&#x27;Observed Data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot True function</span></span><br><span class="line">plt.plot(X, f_true, label=<span class="string">&#x27;True function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Margin of error (%95 Confidence interval)</span></span><br><span class="line">plot_margin_of_error(X, mu_s, cov_s)</span><br><span class="line">plt.axis([-<span class="number">5</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><table>    <tr>        <td ><img src="https://i.loli.net/2020/10/11/JTyoUWwkn8vgDKH.png"></td>        <td ><img src="https://i.loli.net/2020/10/11/C9daYNwu4M5W2rq.png"></td>    </tr></table><h3 id="Effect-of-kernel-parameters-and-noise-parameter"><a href="#Effect-of-kernel-parameters-and-noise-parameter" class="headerlink" title="Effect of kernel parameters and noise parameter"></a>Effect of kernel parameters and noise parameter</h3><p>The following example shows the effect of kernel parameters $l$ and $\sigma_f$ as well as the noise parameter $\sigma_y$. Higher $l$ values lead to smoother functions and therefore to coarser approximations of the training data. Lower $l$ values make functions more wiggly with wide confidence intervals between training data points. $\sigma_f$ controls the vertical variation of functions drawn from the GP. This can be seen by the wide confidence intervals outside the training data region in the right figure of the second row. $\sigma_y$ represents the amount of noise in the training data. Higher $\sigma_y$ values make more coarse approximations which avoids overfitting to noisy data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">params = [</span><br><span class="line">    (<span class="number">0.3</span>, <span class="number">1.0</span>, <span class="number">0.2</span>),</span><br><span class="line">    (<span class="number">3.0</span>, <span class="number">1.0</span>, <span class="number">0.2</span>),</span><br><span class="line">    (<span class="number">1.0</span>, <span class="number">0.3</span>, <span class="number">0.2</span>),</span><br><span class="line">    (<span class="number">1.0</span>, <span class="number">3.0</span>, <span class="number">0.2</span>),</span><br><span class="line">    (<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.05</span>),</span><br><span class="line">    (<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.5</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (l, sigma_f, sigma_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(params):</span><br><span class="line">    mu_s, cov_s = posterior_predictive(X, X_train, Y_train_noisy, l=l,</span><br><span class="line">                                       sigma_f=sigma_f,</span><br><span class="line">                                       sigma_y=sigma_y)</span><br><span class="line">    plt.title(<span class="string">f&#x27;l = <span class="subst">&#123;l&#125;</span>, sigma_f = <span class="subst">&#123;sigma_f&#125;</span>, sigma_y = <span class="subst">&#123;sigma_y&#125;</span>&#x27;</span>)</span><br><span class="line">    plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train_noisy)</span><br><span class="line">    plt.axis([-<span class="number">5</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><table>    <tr>        <td ><img src="https://i.loli.net/2020/10/11/BRNfYlsPL3J2Imx.png"></td>        <td ><img src="https://i.loli.net/2020/10/11/3OCpPnfbsBI9d8K.png"></td>    </tr></table><table>    <tr>        <td ><img src="https://i.loli.net/2020/10/11/aqxECbszmH5J7VN.png"></td>        <td ><img src="https://i.loli.net/2020/10/11/ONlIuoDvdei4s9W.png"></td>    </tr></table><table>    <tr>        <td ><img src="https://i.loli.net/2020/10/11/IMFoX2O56sHeZJz.png"></td>        <td ><img src="https://i.loli.net/2020/10/11/5CNWtifgTPEUaIw.png"></td>    </tr></table><p><br></p><p>Optimal values for these parameters can be estimated by maximizing the log marginal likelihood which is given by<sup>[1][3]</sup></p><script type="math/tex; mode=display">\begin{align*}\log p(\mathbf{y} \lvert \mathbf{X}) &=\log \mathcal{N}(\mathbf{y} \lvert \boldsymbol{0},\mathbf{K}_y) \\&=-\frac{1}{2} \mathbf{y}^T \mathbf{K}_y^{-1} \mathbf{y} -\frac{1}{2} \log \begin{vmatrix}\mathbf{K}_y\end{vmatrix} -\frac{N}{2} \log(2\pi) \tag{10}\end{align*}</script><p>In the following we will minimize the negative log marginal likelihood w.r.t. parameters $l$ and $\sigma_f$, $\sigma_y$ is set to the known noise level of the data. If the noise level is unknown, $\sigma_y$ can be estimated as well along with the other parameters. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> cholesky, det, lstsq</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nll_fn</span>(<span class="params">X_train, Y_train, noise, naive=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Returns a function that computes the negative log marginal</span></span><br><span class="line"><span class="string">    likelihood for training data X_train and Y_train and given</span></span><br><span class="line"><span class="string">    noise level.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train: training locations (m x d).</span></span><br><span class="line"><span class="string">        Y_train: training targets (m x 1).</span></span><br><span class="line"><span class="string">        noise: known noise level of Y_train.</span></span><br><span class="line"><span class="string">        naive: if True use a naive implementation of Eq. (10), if</span></span><br><span class="line"><span class="string">               False use a numerically more stable implementation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Minimization objective.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nll_naive</span>(<span class="params">theta</span>):</span></span><br><span class="line">        <span class="comment"># Naive implementation of Eq. (10). Works well for the examples</span></span><br><span class="line">        <span class="comment"># in this article but is numerically less stable compared to</span></span><br><span class="line">        <span class="comment"># the implementation in nll_stable below.</span></span><br><span class="line">        K = kernel(X_train, X_train, l=theta[<span class="number">0</span>], sigma_f=theta[<span class="number">1</span>]) + \</span><br><span class="line">            noise ** <span class="number">2</span> * np.eye(<span class="built_in">len</span>(X_train))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> * np.log(det(K)) + \</span><br><span class="line">               <span class="number">0.5</span> * Y_train.T.dot(inv(K).dot(Y_train)) + \</span><br><span class="line">               <span class="number">0.5</span> * <span class="built_in">len</span>(X_train) * np.log(<span class="number">2</span> * np.pi)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nll_stable</span>(<span class="params">theta</span>):</span></span><br><span class="line">        <span class="comment"># Numerically more stable implementation of Eq. (10) as described</span></span><br><span class="line">        <span class="comment"># in http://www.gaussianprocess.org/gpml/chapters/RW2.pdf, Section</span></span><br><span class="line">        <span class="comment"># 2.2, Algorithm 2.1.</span></span><br><span class="line">        K = kernel(X_train, X_train, l=theta[<span class="number">0</span>], sigma_f=theta[<span class="number">1</span>]) + \</span><br><span class="line">            noise ** <span class="number">2</span> * np.eye(<span class="built_in">len</span>(X_train))</span><br><span class="line">        L = cholesky(K)</span><br><span class="line">        <span class="keyword">return</span> np.<span class="built_in">sum</span>(np.log(np.diagonal(L))) + \</span><br><span class="line">               <span class="number">0.5</span> * Y_train.T.dot(lstsq(L.T, lstsq(L, Y_train)[<span class="number">0</span>])[<span class="number">0</span>]) + \</span><br><span class="line">               <span class="number">0.5</span> * <span class="built_in">len</span>(X_train) * np.log(<span class="number">2</span> * np.pi)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> naive:</span><br><span class="line">        <span class="keyword">return</span> nll_naive</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> nll_stable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimize the negative log-likelihood w.r.t. parameters l and sigma_f.</span></span><br><span class="line"><span class="comment"># We should actually run the minimization several times with different</span></span><br><span class="line"><span class="comment"># initializations to avoid local minimal but this is skipped here for</span></span><br><span class="line"><span class="comment"># simplicity.</span></span><br><span class="line">res = minimize(nll_fn(X_train, Y_train_noisy, noise), [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">               bounds=((<span class="number">1e-5</span>, <span class="literal">None</span>), (<span class="number">1e-5</span>, <span class="literal">None</span>)),</span><br><span class="line">               method=<span class="string">&#x27;L-BFGS-B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store the optimization results in global variables so that we can</span></span><br><span class="line"><span class="comment"># compare it later with the results from other implementations.</span></span><br><span class="line">l_opt, sigma_f_opt = res.x</span><br><span class="line">l_opt, sigma_f_opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute the posterior predictive statistics with optimized kernel parameters and plot the results</span></span><br><span class="line">mu_s, cov_s = posterior_predictive(X, X_train, Y_train_noisy, l=l_opt, sigma_f=sigma_f_opt, sigma_y=noise)</span><br><span class="line">plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train_noisy)</span><br><span class="line">plt.axis([-<span class="number">5</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">plt.title(<span class="string">f&#x27;After parameter optimization:l = <span class="subst">&#123;l_opt:<span class="number">.2</span>f&#125;</span>, sigma_f = <span class="subst">&#123;sigma_f_opt:<span class="number">.2</span>f&#125;</span>, sigma_y = <span class="subst">&#123;noise&#125;</span>&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/bipGWgtfJeFOKrR.png"></div><p><br></p><p>With optimized kernel parameters, training data are reasonably covered by the 95% confidence interval and the mean of the posterior predictive is a good approximation.</p><h3 id="Higher-dimensions"><a href="#Higher-dimensions" class="headerlink" title="Higher dimensions"></a>Higher dimensions</h3><p>The above implementation can also be used for higher input data dimensions. Here, a GP is used to fit noisy samples from a sine wave originating at $\boldsymbol{0}$ and expanding in the x-y plane. The following plots show the noisy samples and the posterior predictive mean before and after kernel parameter optimization.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gp_2D</span>(<span class="params">gx, gy, mu, X_train, Y_train, title, i</span>):</span></span><br><span class="line">    ax = plt.gcf().add_subplot(<span class="number">1</span>, <span class="number">2</span>, i, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">    ax.plot_surface(gx, gy, mu.reshape(gx.shape), cmap=cm.coolwarm, linewidth=<span class="number">0</span>, alpha=<span class="number">0.2</span>, antialiased=<span class="literal">False</span>)</span><br><span class="line">    ax.scatter(X_train[:, <span class="number">0</span>], X_train[:, <span class="number">1</span>], Y_train, c=Y_train, cmap=cm.coolwarm)</span><br><span class="line">    z = mu.reshape(gx.shape)</span><br><span class="line">    ax.contourf(gx, gy, z, zdir=<span class="string">&#x27;z&#x27;</span>, offset=<span class="number">0</span>, cmap=cm.coolwarm, alpha=<span class="number">0.6</span>)</span><br><span class="line">    ax.set_title(title)</span><br><span class="line"></span><br><span class="line">noise_2D = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">rx, ry = np.arange(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">0.3</span>), np.arange(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">0.3</span>)</span><br><span class="line">gx, gy = np.meshgrid(rx, rx)</span><br><span class="line"></span><br><span class="line">X_2D = np.c_[gx.ravel(), gy.ravel()]</span><br><span class="line"></span><br><span class="line">X_2D_train = np.random.uniform(-<span class="number">4</span>, <span class="number">4</span>, (<span class="number">100</span>, <span class="number">2</span>))</span><br><span class="line">Y_2D_train = np.sin(<span class="number">0.5</span> * np.linalg.norm(X_2D_train, axis=<span class="number">1</span>)) + \</span><br><span class="line">             noise_2D * np.random.randn(<span class="built_in">len</span>(X_2D_train))</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">mu_s, _ = posterior_predictive(X_2D, X_2D_train, Y_2D_train, sigma_y=noise_2D)</span><br><span class="line">plot_gp_2D(gx, gy, mu_s, X_2D_train, Y_2D_train,</span><br><span class="line">           <span class="string">f&#x27;Before parameter optimization: l=<span class="subst">&#123;<span class="number">1.00</span>&#125;</span> sigma_f=<span class="subst">&#123;<span class="number">1.00</span>&#125;</span>&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">res = minimize(nll_fn(X_2D_train, Y_2D_train, noise_2D), [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">               bounds=((<span class="number">1e-5</span>, <span class="literal">None</span>), (<span class="number">1e-5</span>, <span class="literal">None</span>)),</span><br><span class="line">               method=<span class="string">&#x27;L-BFGS-B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mu_s, _ = posterior_predictive(X_2D, X_2D_train, Y_2D_train, *res.x, sigma_y=noise_2D)</span><br><span class="line">plot_gp_2D(gx, gy, mu_s, X_2D_train, Y_2D_train,</span><br><span class="line">           <span class="string">f&#x27;After parameter optimization: l=<span class="subst">&#123;res.x[<span class="number">0</span>]:<span class="number">.2</span>f&#125;</span> sigma_f=<span class="subst">&#123;res.x[<span class="number">1</span>]:<span class="number">.2</span>f&#125;</span>&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://i.loli.net/2020/11/15/b5r4B6mWYzeqhOK.png"></div><p><br></p><p>Note how the true sine wave is approximated much better after parameter optimization.</p><h2 id="Library-that-implement-GPs"><a href="#Library-that-implement-GPs" class="headerlink" title="Library that implement GPs"></a>Library that implement GPs</h2><p>This section shows a example of library that provide implementation of GPs. Only a minimal setup will be provided here, just enough for reproducing the above results. For further details please consult the documentation of the library.</p><h3 id="Scikit-learn"><a href="#Scikit-learn" class="headerlink" title="Scikit-learn"></a>Scikit-learn</h3><p>Scikit-learn provides a <code>GaussianProcessRegressor</code> for implementing <a href="http://scikit-learn.org/stable/modules/gaussian_process.html#gaussian-process-regression-gpr">GP regression models</a>. It can be configured with <a href="http://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels">pre-defined kernels and user-defined kernels</a>. Kernels can also be composed. The squared exponential kernel is the <code>RBF</code> kernel in scikit-learn. The <code>RBF</code> kernel only has a <code>length_scale</code> parameter which corresponds to the $l$ parameter above. To have a $\sigma_f$ parameter as well, we have to compose the <code>RBF</code> kernel with a <code>ConstantKernel</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.gaussian_process <span class="keyword">import</span> GaussianProcessRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.gaussian_process.kernels <span class="keyword">import</span> ConstantKernel, RBF</span><br><span class="line"></span><br><span class="line">rbf = ConstantKernel(<span class="number">1.0</span>) * RBF(length_scale=<span class="number">1.0</span>)</span><br><span class="line">gpr = GaussianProcessRegressor(kernel=rbf, alpha=noise**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reuse training data from previous 1D example</span></span><br><span class="line">gpr.fit(X_train, Y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute posterior predictive mean and covariance</span></span><br><span class="line">mu_s, cov_s = gpr.predict(X, return_cov=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Obtain optimized kernel parameters</span></span><br><span class="line">l = gpr.kernel_.k2.get_params()[<span class="string">&#x27;length_scale&#x27;</span>]</span><br><span class="line">sigma_f = np.sqrt(gpr.kernel_.k1.get_params()[<span class="string">&#x27;constant_value&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compare with previous results</span></span><br><span class="line"><span class="keyword">assert</span>(np.isclose(l_opt, l))</span><br><span class="line"><span class="keyword">assert</span>(np.isclose(sigma_f_opt, sigma_f))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the results</span></span><br><span class="line">plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train)</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/RhfyaLoGKF3u7Vb.png"></div><p><br></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] Kevin P. Murphy. <a href="https://mitpress.mit.edu/books/machine-learning-0">Machine Learning, A Probabilistic Perspective</a>, Chapters 4, 14 and 15.<br>[2] Christopher M. Bishop. <a href="http://www.springer.com/de/book/9780387310732">Pattern Recognition and Machine Learning</a>, Chapter 6.<br>[3] Carl Edward Rasmussen and Christopher K. I. Williams. <a href="http://www.gaussianprocess.org/gpml/">Gaussian Processes for Machine Learning</a>.<br>[4] Guibo Wang. <a href="https://borgwang.github.io/ml/2019/07/28/gaussian-processes.html">Gaussian processes</a>.<br>[5] Martin Krasser. <a href="https://krasserm.github.io/2018/03/19/gaussian-processes/">Gaussian processes</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;In supervised learning, we oft</summary>
      
    
    
    
    
  </entry>
  
</feed>
